{"ast":null,"code":"\"use strict\"; // Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\Activants46\\\\Desktop\\\\githubLMS\\\\counsellorserver\\\\ATIVANTS_LMS_COUNSELLOR\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\Activants46\\\\Desktop\\\\githubLMS\\\\counsellorserver\\\\ATIVANTS_LMS_COUNSELLOR\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Activants46\\\\Desktop\\\\githubLMS\\\\counsellorserver\\\\ATIVANTS_LMS_COUNSELLOR\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Activants46\\\\Desktop\\\\githubLMS\\\\counsellorserver\\\\ATIVANTS_LMS_COUNSELLOR\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NodeCrypto = void 0;\n\nvar crypto = require(\"crypto\");\n\nvar NodeCrypto = /*#__PURE__*/function () {\n  function NodeCrypto() {\n    _classCallCheck(this, NodeCrypto);\n  }\n\n  _createClass(NodeCrypto, [{\n    key: \"sha256DigestBase64\",\n    value: function () {\n      var _sha256DigestBase = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(str) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", crypto.createHash('sha256').update(str).digest('base64'));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function sha256DigestBase64(_x) {\n        return _sha256DigestBase.apply(this, arguments);\n      }\n\n      return sha256DigestBase64;\n    }()\n  }, {\n    key: \"randomBytesBase64\",\n    value: function randomBytesBase64(count) {\n      return crypto.randomBytes(count).toString('base64');\n    }\n  }, {\n    key: \"verify\",\n    value: function () {\n      var _verify = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(pubkey, data, signature) {\n        var verifier;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                verifier = crypto.createVerify('sha256');\n                verifier.update(data);\n                verifier.end();\n                return _context2.abrupt(\"return\", verifier.verify(pubkey, signature, 'base64'));\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function verify(_x2, _x3, _x4) {\n        return _verify.apply(this, arguments);\n      }\n\n      return verify;\n    }()\n  }, {\n    key: \"sign\",\n    value: function () {\n      var _sign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(privateKey, data) {\n        var signer;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                signer = crypto.createSign('RSA-SHA256');\n                signer.update(data);\n                signer.end();\n                return _context3.abrupt(\"return\", signer.sign(privateKey, 'base64'));\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function sign(_x5, _x6) {\n        return _sign.apply(this, arguments);\n      }\n\n      return sign;\n    }()\n  }, {\n    key: \"decodeBase64StringUtf8\",\n    value: function decodeBase64StringUtf8(base64) {\n      return Buffer.from(base64, 'base64').toString('utf-8');\n    }\n  }, {\n    key: \"encodeBase64StringUtf8\",\n    value: function encodeBase64StringUtf8(text) {\n      return Buffer.from(text, 'utf-8').toString('base64');\n    }\n  }]);\n\n  return NodeCrypto;\n}();\n\nexports.NodeCrypto = NodeCrypto;","map":{"version":3,"sources":["C:/Users/Activants46/Desktop/githubLMS/counsellorserver/ATIVANTS_LMS_COUNSELLOR/node_modules/google-auth-library/build/src/crypto/node/crypto.js"],"names":["Object","defineProperty","exports","value","NodeCrypto","crypto","require","str","createHash","update","digest","count","randomBytes","toString","pubkey","data","signature","verifier","createVerify","end","verify","privateKey","signer","createSign","sign","base64","Buffer","from","text"],"mappings":"AAAA,a,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,UAAR,GAAqB,KAAK,CAA1B;;AACA,IAAMC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;IACMF,U;;;;;;;;wGACuBG,G;;;;;iDACdF,MAAM,CAACG,UAAP,CAAkB,QAAlB,EAA4BC,MAA5B,CAAmCF,GAAnC,EAAwCG,MAAxC,CAA+C,QAA/C,C;;;;;;;;;;;;;;;;;;sCAEOC,K,EAAO;AACrB,aAAON,MAAM,CAACO,WAAP,CAAmBD,KAAnB,EAA0BE,QAA1B,CAAmC,QAAnC,CAAP;AACH;;;;+FACYC,M,EAAQC,I,EAAMC,S;;;;;;AACjBC,gBAAAA,Q,GAAWZ,MAAM,CAACa,YAAP,CAAoB,QAApB,C;AACjBD,gBAAAA,QAAQ,CAACR,MAAT,CAAgBM,IAAhB;AACAE,gBAAAA,QAAQ,CAACE,GAAT;kDACOF,QAAQ,CAACG,MAAT,CAAgBN,MAAhB,EAAwBE,SAAxB,EAAmC,QAAnC,C;;;;;;;;;;;;;;;;;;;6FAEAK,U,EAAYN,I;;;;;;AACbO,gBAAAA,M,GAASjB,MAAM,CAACkB,UAAP,CAAkB,YAAlB,C;AACfD,gBAAAA,MAAM,CAACb,MAAP,CAAcM,IAAd;AACAO,gBAAAA,MAAM,CAACH,GAAP;kDACOG,MAAM,CAACE,IAAP,CAAYH,UAAZ,EAAwB,QAAxB,C;;;;;;;;;;;;;;;;;;2CAEYI,M,EAAQ;AAC3B,aAAOC,MAAM,CAACC,IAAP,CAAYF,MAAZ,EAAoB,QAApB,EAA8BZ,QAA9B,CAAuC,OAAvC,CAAP;AACH;;;2CACsBe,I,EAAM;AACzB,aAAOF,MAAM,CAACC,IAAP,CAAYC,IAAZ,EAAkB,OAAlB,EAA2Bf,QAA3B,CAAoC,QAApC,CAAP;AACH;;;;;;AAELX,OAAO,CAACE,UAAR,GAAqBA,UAArB","sourcesContent":["\"use strict\";\r\n// Copyright 2019 Google LLC\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.NodeCrypto = void 0;\r\nconst crypto = require(\"crypto\");\r\nclass NodeCrypto {\r\n    async sha256DigestBase64(str) {\r\n        return crypto.createHash('sha256').update(str).digest('base64');\r\n    }\r\n    randomBytesBase64(count) {\r\n        return crypto.randomBytes(count).toString('base64');\r\n    }\r\n    async verify(pubkey, data, signature) {\r\n        const verifier = crypto.createVerify('sha256');\r\n        verifier.update(data);\r\n        verifier.end();\r\n        return verifier.verify(pubkey, signature, 'base64');\r\n    }\r\n    async sign(privateKey, data) {\r\n        const signer = crypto.createSign('RSA-SHA256');\r\n        signer.update(data);\r\n        signer.end();\r\n        return signer.sign(privateKey, 'base64');\r\n    }\r\n    decodeBase64StringUtf8(base64) {\r\n        return Buffer.from(base64, 'base64').toString('utf-8');\r\n    }\r\n    encodeBase64StringUtf8(text) {\r\n        return Buffer.from(text, 'utf-8').toString('base64');\r\n    }\r\n}\r\nexports.NodeCrypto = NodeCrypto;\r\n//# sourceMappingURL=crypto.js.map"]},"metadata":{},"sourceType":"script"}