{"ast":null,"code":"\"use strict\"; // Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\Activants46\\\\Desktop\\\\githubLMS\\\\counsellorserver\\\\ATIVANTS_LMS_COUNSELLOR\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\Activants46\\\\Desktop\\\\githubLMS\\\\counsellorserver\\\\ATIVANTS_LMS_COUNSELLOR\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Activants46\\\\Desktop\\\\githubLMS\\\\counsellorserver\\\\ATIVANTS_LMS_COUNSELLOR\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Activants46\\\\Desktop\\\\githubLMS\\\\counsellorserver\\\\ATIVANTS_LMS_COUNSELLOR\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GoogleAuth = exports.CLOUD_SDK_CLIENT_ID = void 0;\n\nvar child_process_1 = require(\"child_process\");\n\nvar fs = require(\"fs\");\n\nvar gcpMetadata = require(\"gcp-metadata\");\n\nvar os = require(\"os\");\n\nvar path = require(\"path\");\n\nvar crypto_1 = require(\"../crypto/crypto\");\n\nvar transporters_1 = require(\"../transporters\");\n\nvar computeclient_1 = require(\"./computeclient\");\n\nvar idtokenclient_1 = require(\"./idtokenclient\");\n\nvar envDetect_1 = require(\"./envDetect\");\n\nvar jwtclient_1 = require(\"./jwtclient\");\n\nvar refreshclient_1 = require(\"./refreshclient\");\n\nexports.CLOUD_SDK_CLIENT_ID = '764086051850-6qr4p6gpi6hn506pt8ejuq83di341hur.apps.googleusercontent.com';\n\nvar GoogleAuth = /*#__PURE__*/function () {\n  function GoogleAuth(opts) {\n    _classCallCheck(this, GoogleAuth);\n\n    /**\r\n     * Caches a value indicating whether the auth layer is running on Google\r\n     * Compute Engine.\r\n     * @private\r\n     */\n    this.checkIsGCE = undefined; // To save the contents of the JSON credential file\n\n    this.jsonContent = null;\n    this.cachedCredential = null;\n    opts = opts || {};\n    this._cachedProjectId = opts.projectId || null;\n    this.keyFilename = opts.keyFilename || opts.keyFile;\n    this.scopes = opts.scopes;\n    this.jsonContent = opts.credentials || null;\n    this.clientOptions = opts.clientOptions;\n  } // Note:  this properly is only public to satisify unit tests.\n  // https://github.com/Microsoft/TypeScript/issues/5228\n\n\n  _createClass(GoogleAuth, [{\n    key: \"getProjectId\",\n    value: function getProjectId(callback) {\n      if (callback) {\n        this.getProjectIdAsync().then(function (r) {\n          return callback(null, r);\n        }, callback);\n      } else {\n        return this.getProjectIdAsync();\n      }\n    }\n  }, {\n    key: \"getProjectIdAsync\",\n    value: function getProjectIdAsync() {\n      var _this = this;\n\n      if (this._cachedProjectId) {\n        return Promise.resolve(this._cachedProjectId);\n      } // In implicit case, supports three environments. In order of precedence,\n      // the implicit environments are:\n      // - GCLOUD_PROJECT or GOOGLE_CLOUD_PROJECT environment variable\n      // - GOOGLE_APPLICATION_CREDENTIALS JSON file\n      // - Cloud SDK: `gcloud config config-helper --format json`\n      // - GCE project ID from metadata server)\n\n\n      if (!this._getDefaultProjectIdPromise) {\n        // TODO: refactor the below code so that it doesn't mix and match\n        // promises and async/await.\n        this._getDefaultProjectIdPromise = new Promise(\n        /*#__PURE__*/\n        // eslint-disable-next-line no-async-promise-executor\n        function () {\n          var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(resolve, reject) {\n            var projectId;\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.prev = 0;\n                    _context.t2 = _this.getProductionProjectId();\n\n                    if (_context.t2) {\n                      _context.next = 6;\n                      break;\n                    }\n\n                    _context.next = 5;\n                    return _this.getFileProjectId();\n\n                  case 5:\n                    _context.t2 = _context.sent;\n\n                  case 6:\n                    _context.t1 = _context.t2;\n\n                    if (_context.t1) {\n                      _context.next = 11;\n                      break;\n                    }\n\n                    _context.next = 10;\n                    return _this.getDefaultServiceProjectId();\n\n                  case 10:\n                    _context.t1 = _context.sent;\n\n                  case 11:\n                    _context.t0 = _context.t1;\n\n                    if (_context.t0) {\n                      _context.next = 16;\n                      break;\n                    }\n\n                    _context.next = 15;\n                    return _this.getGCEProjectId();\n\n                  case 15:\n                    _context.t0 = _context.sent;\n\n                  case 16:\n                    projectId = _context.t0;\n                    _this._cachedProjectId = projectId;\n\n                    if (projectId) {\n                      _context.next = 20;\n                      break;\n                    }\n\n                    throw new Error('Unable to detect a Project Id in the current environment. \\n' + 'To learn more about authentication and Google APIs, visit: \\n' + 'https://cloud.google.com/docs/authentication/getting-started');\n\n                  case 20:\n                    resolve(projectId);\n                    _context.next = 26;\n                    break;\n\n                  case 23:\n                    _context.prev = 23;\n                    _context.t3 = _context[\"catch\"](0);\n                    reject(_context.t3);\n\n                  case 26:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee, null, [[0, 23]]);\n          }));\n\n          return function (_x, _x2) {\n            return _ref.apply(this, arguments);\n          };\n        }());\n      }\n\n      return this._getDefaultProjectIdPromise;\n    }\n  }, {\n    key: \"getApplicationDefault\",\n    value: function getApplicationDefault() {\n      var optionsOrCallback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var callback = arguments.length > 1 ? arguments[1] : undefined;\n      var options;\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n      } else {\n        options = optionsOrCallback;\n      }\n\n      if (callback) {\n        this.getApplicationDefaultAsync(options).then(function (r) {\n          return callback(null, r.credential, r.projectId);\n        }, callback);\n      } else {\n        return this.getApplicationDefaultAsync(options);\n      }\n    }\n  }, {\n    key: \"getApplicationDefaultAsync\",\n    value: function () {\n      var _getApplicationDefaultAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var options,\n            credential,\n            projectId,\n            isGCE,\n            _args2 = arguments;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                options = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};\n\n                if (!this.cachedCredential) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                _context2.t0 = this.cachedCredential;\n                _context2.next = 5;\n                return this.getProjectIdAsync();\n\n              case 5:\n                _context2.t1 = _context2.sent;\n                return _context2.abrupt(\"return\", {\n                  credential: _context2.t0,\n                  projectId: _context2.t1\n                });\n\n              case 7:\n                _context2.next = 9;\n                return this._tryGetApplicationCredentialsFromEnvironmentVariable(options);\n\n              case 9:\n                credential = _context2.sent;\n\n                if (!credential) {\n                  _context2.next = 17;\n                  break;\n                }\n\n                if (credential instanceof jwtclient_1.JWT) {\n                  credential.scopes = this.scopes;\n                }\n\n                this.cachedCredential = credential;\n                _context2.next = 15;\n                return this.getProjectId();\n\n              case 15:\n                projectId = _context2.sent;\n                return _context2.abrupt(\"return\", {\n                  credential: credential,\n                  projectId: projectId\n                });\n\n              case 17:\n                _context2.next = 19;\n                return this._tryGetApplicationCredentialsFromWellKnownFile(options);\n\n              case 19:\n                credential = _context2.sent;\n\n                if (!credential) {\n                  _context2.next = 27;\n                  break;\n                }\n\n                if (credential instanceof jwtclient_1.JWT) {\n                  credential.scopes = this.scopes;\n                }\n\n                this.cachedCredential = credential;\n                _context2.next = 25;\n                return this.getProjectId();\n\n              case 25:\n                projectId = _context2.sent;\n                return _context2.abrupt(\"return\", {\n                  credential: credential,\n                  projectId: projectId\n                });\n\n              case 27:\n                _context2.prev = 27;\n                _context2.next = 30;\n                return this._checkIsGCE();\n\n              case 30:\n                isGCE = _context2.sent;\n                _context2.next = 37;\n                break;\n\n              case 33:\n                _context2.prev = 33;\n                _context2.t2 = _context2[\"catch\"](27);\n                _context2.t2.message = \"Unexpected error determining execution environment: \".concat(_context2.t2.message);\n                throw _context2.t2;\n\n              case 37:\n                if (isGCE) {\n                  _context2.next = 39;\n                  break;\n                }\n\n                throw new Error('Could not load the default credentials. Browse to https://cloud.google.com/docs/authentication/getting-started for more information.');\n\n              case 39:\n                // For GCE, just return a default ComputeClient. It will take care of\n                // the rest.\n                options.scopes = this.scopes;\n                this.cachedCredential = new computeclient_1.Compute(options);\n                _context2.next = 43;\n                return this.getProjectId();\n\n              case 43:\n                projectId = _context2.sent;\n                return _context2.abrupt(\"return\", {\n                  projectId: projectId,\n                  credential: this.cachedCredential\n                });\n\n              case 45:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[27, 33]]);\n      }));\n\n      function getApplicationDefaultAsync() {\n        return _getApplicationDefaultAsync.apply(this, arguments);\n      }\n\n      return getApplicationDefaultAsync;\n    }()\n    /**\r\n     * Determines whether the auth layer is running on Google Compute Engine.\r\n     * @returns A promise that resolves with the boolean.\r\n     * @api private\r\n     */\n\n  }, {\n    key: \"_checkIsGCE\",\n    value: function () {\n      var _checkIsGCE2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(this.checkIsGCE === undefined)) {\n                  _context3.next = 4;\n                  break;\n                }\n\n                _context3.next = 3;\n                return gcpMetadata.isAvailable();\n\n              case 3:\n                this.checkIsGCE = _context3.sent;\n\n              case 4:\n                return _context3.abrupt(\"return\", this.checkIsGCE);\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function _checkIsGCE() {\n        return _checkIsGCE2.apply(this, arguments);\n      }\n\n      return _checkIsGCE;\n    }()\n    /**\r\n     * Attempts to load default credentials from the environment variable path..\r\n     * @returns Promise that resolves with the OAuth2Client or null.\r\n     * @api private\r\n     */\n\n  }, {\n    key: \"_tryGetApplicationCredentialsFromEnvironmentVariable\",\n    value: function () {\n      var _tryGetApplicationCredentialsFromEnvironmentVariable2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(options) {\n        var credentialsPath;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                credentialsPath = process.env['GOOGLE_APPLICATION_CREDENTIALS'] || process.env['google_application_credentials'];\n\n                if (!(!credentialsPath || credentialsPath.length === 0)) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", null);\n\n              case 3:\n                _context4.prev = 3;\n                return _context4.abrupt(\"return\", this._getApplicationCredentialsFromFilePath(credentialsPath, options));\n\n              case 7:\n                _context4.prev = 7;\n                _context4.t0 = _context4[\"catch\"](3);\n                _context4.t0.message = \"Unable to read the credential file specified by the GOOGLE_APPLICATION_CREDENTIALS environment variable: \".concat(_context4.t0.message);\n                throw _context4.t0;\n\n              case 11:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[3, 7]]);\n      }));\n\n      function _tryGetApplicationCredentialsFromEnvironmentVariable(_x3) {\n        return _tryGetApplicationCredentialsFromEnvironmentVariable2.apply(this, arguments);\n      }\n\n      return _tryGetApplicationCredentialsFromEnvironmentVariable;\n    }()\n    /**\r\n     * Attempts to load default credentials from a well-known file location\r\n     * @return Promise that resolves with the OAuth2Client or null.\r\n     * @api private\r\n     */\n\n  }, {\n    key: \"_tryGetApplicationCredentialsFromWellKnownFile\",\n    value: function () {\n      var _tryGetApplicationCredentialsFromWellKnownFile2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(options) {\n        var location, home, client;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                // First, figure out the location of the file, depending upon the OS type.\n                location = null;\n\n                if (this._isWindows()) {\n                  // Windows\n                  location = process.env['APPDATA'];\n                } else {\n                  // Linux or Mac\n                  home = process.env['HOME'];\n\n                  if (home) {\n                    location = path.join(home, '.config');\n                  }\n                } // If we found the root path, expand it.\n\n\n                if (location) {\n                  location = path.join(location, 'gcloud', 'application_default_credentials.json');\n\n                  if (!fs.existsSync(location)) {\n                    location = null;\n                  }\n                } // The file does not exist.\n\n\n                if (location) {\n                  _context5.next = 5;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", null);\n\n              case 5:\n                _context5.next = 7;\n                return this._getApplicationCredentialsFromFilePath(location, options);\n\n              case 7:\n                client = _context5.sent;\n                return _context5.abrupt(\"return\", client);\n\n              case 9:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function _tryGetApplicationCredentialsFromWellKnownFile(_x4) {\n        return _tryGetApplicationCredentialsFromWellKnownFile2.apply(this, arguments);\n      }\n\n      return _tryGetApplicationCredentialsFromWellKnownFile;\n    }()\n    /**\r\n     * Attempts to load default credentials from a file at the given path..\r\n     * @param filePath The path to the file to read.\r\n     * @returns Promise that resolves with the OAuth2Client\r\n     * @api private\r\n     */\n\n  }, {\n    key: \"_getApplicationCredentialsFromFilePath\",\n    value: function () {\n      var _getApplicationCredentialsFromFilePath2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(filePath) {\n        var options,\n            readStream,\n            _args6 = arguments;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                options = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : {};\n\n                if (!(!filePath || filePath.length === 0)) {\n                  _context6.next = 3;\n                  break;\n                }\n\n                throw new Error('The file path is invalid.');\n\n              case 3:\n                _context6.prev = 3;\n                // Resolve path to actual file in case of symlink. Expect a thrown error\n                // if not resolvable.\n                filePath = fs.realpathSync(filePath);\n\n                if (fs.lstatSync(filePath).isFile()) {\n                  _context6.next = 7;\n                  break;\n                }\n\n                throw new Error();\n\n              case 7:\n                _context6.next = 13;\n                break;\n\n              case 9:\n                _context6.prev = 9;\n                _context6.t0 = _context6[\"catch\"](3);\n                _context6.t0.message = \"The file at \".concat(filePath, \" does not exist, or it is not a file. \").concat(_context6.t0.message);\n                throw _context6.t0;\n\n              case 13:\n                // Now open a read stream on the file, and parse it.\n                readStream = fs.createReadStream(filePath);\n                return _context6.abrupt(\"return\", this.fromStream(readStream, options));\n\n              case 15:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[3, 9]]);\n      }));\n\n      function _getApplicationCredentialsFromFilePath(_x5) {\n        return _getApplicationCredentialsFromFilePath2.apply(this, arguments);\n      }\n\n      return _getApplicationCredentialsFromFilePath;\n    }()\n    /**\r\n     * Create a credentials instance using the given input options.\r\n     * @param json The input object.\r\n     * @param options The JWT or UserRefresh options for the client\r\n     * @returns JWT or UserRefresh Client with data\r\n     */\n\n  }, {\n    key: \"fromJSON\",\n    value: function fromJSON(json, options) {\n      var client;\n\n      if (!json) {\n        throw new Error('Must pass in a JSON object containing the Google auth settings.');\n      }\n\n      options = options || {};\n\n      if (json.type === 'authorized_user') {\n        client = new refreshclient_1.UserRefreshClient(options);\n      } else {\n        options.scopes = this.scopes;\n        client = new jwtclient_1.JWT(options);\n      }\n\n      client.fromJSON(json);\n      return client;\n    }\n    /**\r\n     * Return a JWT or UserRefreshClient from JavaScript object, caching both the\r\n     * object used to instantiate and the client.\r\n     * @param json The input object.\r\n     * @param options The JWT or UserRefresh options for the client\r\n     * @returns JWT or UserRefresh Client with data\r\n     */\n\n  }, {\n    key: \"_cacheClientFromJSON\",\n    value: function _cacheClientFromJSON(json, options) {\n      var client; // create either a UserRefreshClient or JWT client.\n\n      options = options || {};\n\n      if (json.type === 'authorized_user') {\n        client = new refreshclient_1.UserRefreshClient(options);\n      } else {\n        options.scopes = this.scopes;\n        client = new jwtclient_1.JWT(options);\n      }\n\n      client.fromJSON(json); // cache both raw data used to instantiate client and client itself.\n\n      this.jsonContent = json;\n      this.cachedCredential = client;\n      return this.cachedCredential;\n    }\n  }, {\n    key: \"fromStream\",\n    value: function fromStream(inputStream) {\n      var optionsOrCallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var callback = arguments.length > 2 ? arguments[2] : undefined;\n      var options = {};\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n      } else {\n        options = optionsOrCallback;\n      }\n\n      if (callback) {\n        this.fromStreamAsync(inputStream, options).then(function (r) {\n          return callback(null, r);\n        }, callback);\n      } else {\n        return this.fromStreamAsync(inputStream, options);\n      }\n    }\n  }, {\n    key: \"fromStreamAsync\",\n    value: function fromStreamAsync(inputStream, options) {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!inputStream) {\n          throw new Error('Must pass in a stream containing the Google auth settings.');\n        }\n\n        var s = '';\n        inputStream.setEncoding('utf8').on('error', reject).on('data', function (chunk) {\n          return s += chunk;\n        }).on('end', function () {\n          try {\n            var data = JSON.parse(s);\n\n            var r = _this2._cacheClientFromJSON(data, options);\n\n            return resolve(r);\n          } catch (err) {\n            return reject(err);\n          }\n        });\n      });\n    }\n    /**\r\n     * Create a credentials instance using the given API key string.\r\n     * @param apiKey The API key string\r\n     * @param options An optional options object.\r\n     * @returns A JWT loaded from the key\r\n     */\n\n  }, {\n    key: \"fromAPIKey\",\n    value: function fromAPIKey(apiKey, options) {\n      options = options || {};\n      var client = new jwtclient_1.JWT(options);\n      client.fromAPIKey(apiKey);\n      return client;\n    }\n    /**\r\n     * Determines whether the current operating system is Windows.\r\n     * @api private\r\n     */\n\n  }, {\n    key: \"_isWindows\",\n    value: function _isWindows() {\n      var sys = os.platform();\n\n      if (sys && sys.length >= 3) {\n        if (sys.substring(0, 3).toLowerCase() === 'win') {\n          return true;\n        }\n      }\n\n      return false;\n    }\n    /**\r\n     * Run the Google Cloud SDK command that prints the default project ID\r\n     */\n\n  }, {\n    key: \"getDefaultServiceProjectId\",\n    value: function () {\n      var _getDefaultServiceProjectId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                return _context7.abrupt(\"return\", new Promise(function (resolve) {\n                  child_process_1.exec('gcloud config config-helper --format json', function (err, stdout) {\n                    if (!err && stdout) {\n                      try {\n                        var projectId = JSON.parse(stdout).configuration.properties.core.project;\n                        resolve(projectId);\n                        return;\n                      } catch (e) {// ignore errors\n                      }\n                    }\n\n                    resolve(null);\n                  });\n                }));\n\n              case 1:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      function getDefaultServiceProjectId() {\n        return _getDefaultServiceProjectId.apply(this, arguments);\n      }\n\n      return getDefaultServiceProjectId;\n    }()\n    /**\r\n     * Loads the project id from environment variables.\r\n     * @api private\r\n     */\n\n  }, {\n    key: \"getProductionProjectId\",\n    value: function getProductionProjectId() {\n      return process.env['GCLOUD_PROJECT'] || process.env['GOOGLE_CLOUD_PROJECT'] || process.env['gcloud_project'] || process.env['google_cloud_project'];\n    }\n    /**\r\n     * Loads the project id from the GOOGLE_APPLICATION_CREDENTIALS json file.\r\n     * @api private\r\n     */\n\n  }, {\n    key: \"getFileProjectId\",\n    value: function () {\n      var _getFileProjectId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        var creds, r;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                if (!this.cachedCredential) {\n                  _context8.next = 2;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", this.cachedCredential.projectId);\n\n              case 2:\n                if (!this.keyFilename) {\n                  _context8.next = 8;\n                  break;\n                }\n\n                _context8.next = 5;\n                return this.getClient();\n\n              case 5:\n                creds = _context8.sent;\n\n                if (!(creds && creds.projectId)) {\n                  _context8.next = 8;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", creds.projectId);\n\n              case 8:\n                _context8.next = 10;\n                return this._tryGetApplicationCredentialsFromEnvironmentVariable();\n\n              case 10:\n                r = _context8.sent;\n\n                if (!r) {\n                  _context8.next = 15;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", r.projectId);\n\n              case 15:\n                return _context8.abrupt(\"return\", null);\n\n              case 16:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function getFileProjectId() {\n        return _getFileProjectId.apply(this, arguments);\n      }\n\n      return getFileProjectId;\n    }()\n    /**\r\n     * Gets the Compute Engine project ID if it can be inferred.\r\n     */\n\n  }, {\n    key: \"getGCEProjectId\",\n    value: function () {\n      var _getGCEProjectId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n        var r;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.prev = 0;\n                _context9.next = 3;\n                return gcpMetadata.project('project-id');\n\n              case 3:\n                r = _context9.sent;\n                return _context9.abrupt(\"return\", r);\n\n              case 7:\n                _context9.prev = 7;\n                _context9.t0 = _context9[\"catch\"](0);\n                return _context9.abrupt(\"return\", null);\n\n              case 10:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, null, [[0, 7]]);\n      }));\n\n      function getGCEProjectId() {\n        return _getGCEProjectId.apply(this, arguments);\n      }\n\n      return getGCEProjectId;\n    }()\n  }, {\n    key: \"getCredentials\",\n    value: function getCredentials(callback) {\n      if (callback) {\n        this.getCredentialsAsync().then(function (r) {\n          return callback(null, r);\n        }, callback);\n      } else {\n        return this.getCredentialsAsync();\n      }\n    }\n  }, {\n    key: \"getCredentialsAsync\",\n    value: function () {\n      var _getCredentialsAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n        var credential, isGCE, data;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return this.getClient();\n\n              case 2:\n                if (!this.jsonContent) {\n                  _context10.next = 5;\n                  break;\n                }\n\n                credential = {\n                  client_email: this.jsonContent.client_email,\n                  private_key: this.jsonContent.private_key\n                };\n                return _context10.abrupt(\"return\", credential);\n\n              case 5:\n                _context10.next = 7;\n                return this._checkIsGCE();\n\n              case 7:\n                isGCE = _context10.sent;\n\n                if (isGCE) {\n                  _context10.next = 10;\n                  break;\n                }\n\n                throw new Error('Unknown error.');\n\n              case 10:\n                _context10.next = 12;\n                return gcpMetadata.instance({\n                  property: 'service-accounts/',\n                  params: {\n                    recursive: 'true'\n                  }\n                });\n\n              case 12:\n                data = _context10.sent;\n\n                if (!(!data || !data.default || !data.default.email)) {\n                  _context10.next = 15;\n                  break;\n                }\n\n                throw new Error('Failure from metadata server.');\n\n              case 15:\n                return _context10.abrupt(\"return\", {\n                  client_email: data.default.email\n                });\n\n              case 16:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function getCredentialsAsync() {\n        return _getCredentialsAsync.apply(this, arguments);\n      }\n\n      return getCredentialsAsync;\n    }()\n    /**\r\n     * Automatically obtain a client based on the provided configuration.  If no\r\n     * options were passed, use Application Default Credentials.\r\n     */\n\n  }, {\n    key: \"getClient\",\n    value: function () {\n      var _getClient = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(options) {\n        var filePath, stream;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                if (!options) {\n                  _context11.next = 2;\n                  break;\n                }\n\n                throw new Error('Passing options to getClient is forbidden in v5.0.0. Use new GoogleAuth(opts) instead.');\n\n              case 2:\n                if (this.cachedCredential) {\n                  _context11.next = 16;\n                  break;\n                }\n\n                if (!this.jsonContent) {\n                  _context11.next = 7;\n                  break;\n                }\n\n                this._cacheClientFromJSON(this.jsonContent, this.clientOptions);\n\n                _context11.next = 16;\n                break;\n\n              case 7:\n                if (!this.keyFilename) {\n                  _context11.next = 14;\n                  break;\n                }\n\n                filePath = path.resolve(this.keyFilename);\n                stream = fs.createReadStream(filePath);\n                _context11.next = 12;\n                return this.fromStreamAsync(stream, this.clientOptions);\n\n              case 12:\n                _context11.next = 16;\n                break;\n\n              case 14:\n                _context11.next = 16;\n                return this.getApplicationDefaultAsync(this.clientOptions);\n\n              case 16:\n                return _context11.abrupt(\"return\", this.cachedCredential);\n\n              case 17:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function getClient(_x6) {\n        return _getClient.apply(this, arguments);\n      }\n\n      return getClient;\n    }()\n    /**\r\n     * Creates a client which will fetch an ID token for authorization.\r\n     * @param targetAudience the audience for the fetched ID token.\r\n     * @returns IdTokenClient for making HTTP calls authenticated with ID tokens.\r\n     */\n\n  }, {\n    key: \"getIdTokenClient\",\n    value: function () {\n      var _getIdTokenClient = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(targetAudience) {\n        var client;\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                _context12.next = 2;\n                return this.getClient();\n\n              case 2:\n                client = _context12.sent;\n\n                if ('fetchIdToken' in client) {\n                  _context12.next = 5;\n                  break;\n                }\n\n                throw new Error('Cannot fetch ID token in this environment, use GCE or set the GOOGLE_APPLICATION_CREDENTIALS environment variable to a service account credentials JSON file.');\n\n              case 5:\n                return _context12.abrupt(\"return\", new idtokenclient_1.IdTokenClient({\n                  targetAudience: targetAudience,\n                  idTokenProvider: client\n                }));\n\n              case 6:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function getIdTokenClient(_x7) {\n        return _getIdTokenClient.apply(this, arguments);\n      }\n\n      return getIdTokenClient;\n    }()\n    /**\r\n     * Automatically obtain application default credentials, and return\r\n     * an access token for making requests.\r\n     */\n\n  }, {\n    key: \"getAccessToken\",\n    value: function () {\n      var _getAccessToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {\n        var client;\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.next = 2;\n                return this.getClient();\n\n              case 2:\n                client = _context13.sent;\n                _context13.next = 5;\n                return client.getAccessToken();\n\n              case 5:\n                return _context13.abrupt(\"return\", _context13.sent.token);\n\n              case 6:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function getAccessToken() {\n        return _getAccessToken.apply(this, arguments);\n      }\n\n      return getAccessToken;\n    }()\n    /**\r\n     * Obtain the HTTP headers that will provide authorization for a given\r\n     * request.\r\n     */\n\n  }, {\n    key: \"getRequestHeaders\",\n    value: function () {\n      var _getRequestHeaders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(url) {\n        var client;\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.next = 2;\n                return this.getClient();\n\n              case 2:\n                client = _context14.sent;\n                return _context14.abrupt(\"return\", client.getRequestHeaders(url));\n\n              case 4:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function getRequestHeaders(_x8) {\n        return _getRequestHeaders.apply(this, arguments);\n      }\n\n      return getRequestHeaders;\n    }()\n    /**\r\n     * Obtain credentials for a request, then attach the appropriate headers to\r\n     * the request options.\r\n     * @param opts Axios or Request options on which to attach the headers\r\n     */\n\n  }, {\n    key: \"authorizeRequest\",\n    value: function () {\n      var _authorizeRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(opts) {\n        var url, client, headers;\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                opts = opts || {};\n                url = opts.url || opts.uri;\n                _context15.next = 4;\n                return this.getClient();\n\n              case 4:\n                client = _context15.sent;\n                _context15.next = 7;\n                return client.getRequestHeaders(url);\n\n              case 7:\n                headers = _context15.sent;\n                opts.headers = Object.assign(opts.headers || {}, headers);\n                return _context15.abrupt(\"return\", opts);\n\n              case 10:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function authorizeRequest(_x9) {\n        return _authorizeRequest.apply(this, arguments);\n      }\n\n      return authorizeRequest;\n    }()\n    /**\r\n     * Automatically obtain application default credentials, and make an\r\n     * HTTP request using the given options.\r\n     * @param opts Axios request options for the HTTP request.\r\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  }, {\n    key: \"request\",\n    value: function () {\n      var _request = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(opts) {\n        var client;\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                _context16.next = 2;\n                return this.getClient();\n\n              case 2:\n                client = _context16.sent;\n                return _context16.abrupt(\"return\", client.request(opts));\n\n              case 4:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function request(_x10) {\n        return _request.apply(this, arguments);\n      }\n\n      return request;\n    }()\n    /**\r\n     * Determine the compute environment in which the code is running.\r\n     */\n\n  }, {\n    key: \"getEnv\",\n    value: function getEnv() {\n      return envDetect_1.getEnv();\n    }\n    /**\r\n     * Sign the given data with the current private key, or go out\r\n     * to the IAM API to sign it.\r\n     * @param data The data to be signed.\r\n     */\n\n  }, {\n    key: \"sign\",\n    value: function () {\n      var _sign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(data) {\n        var client, crypto, _sign2, projectId, creds, url, res;\n\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                _context17.next = 2;\n                return this.getClient();\n\n              case 2:\n                client = _context17.sent;\n                crypto = crypto_1.createCrypto();\n\n                if (!(client instanceof jwtclient_1.JWT && client.key)) {\n                  _context17.next = 9;\n                  break;\n                }\n\n                _context17.next = 7;\n                return crypto.sign(client.key, data);\n\n              case 7:\n                _sign2 = _context17.sent;\n                return _context17.abrupt(\"return\", _sign2);\n\n              case 9:\n                _context17.next = 11;\n                return this.getProjectId();\n\n              case 11:\n                projectId = _context17.sent;\n\n                if (projectId) {\n                  _context17.next = 14;\n                  break;\n                }\n\n                throw new Error('Cannot sign data without a project ID.');\n\n              case 14:\n                _context17.next = 16;\n                return this.getCredentials();\n\n              case 16:\n                creds = _context17.sent;\n\n                if (creds.client_email) {\n                  _context17.next = 19;\n                  break;\n                }\n\n                throw new Error('Cannot sign data without `client_email`.');\n\n              case 19:\n                url = \"https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/\".concat(creds.client_email, \":signBlob\");\n                _context17.next = 22;\n                return this.request({\n                  method: 'POST',\n                  url: url,\n                  data: {\n                    payload: crypto.encodeBase64StringUtf8(data)\n                  }\n                });\n\n              case 22:\n                res = _context17.sent;\n                return _context17.abrupt(\"return\", res.data.signedBlob);\n\n              case 24:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function sign(_x11) {\n        return _sign.apply(this, arguments);\n      }\n\n      return sign;\n    }()\n  }, {\n    key: \"isGCE\",\n    get: function get() {\n      return this.checkIsGCE;\n    }\n  }]);\n\n  return GoogleAuth;\n}();\n\nexports.GoogleAuth = GoogleAuth;\n/**\r\n * Export DefaultTransporter as a static property of the class.\r\n */\n\nGoogleAuth.DefaultTransporter = transporters_1.DefaultTransporter;","map":{"version":3,"sources":["C:/Users/Activants46/Desktop/githubLMS/counsellorserver/ATIVANTS_LMS_COUNSELLOR/node_modules/google-auth-library/build/src/auth/googleauth.js"],"names":["Object","defineProperty","exports","value","GoogleAuth","CLOUD_SDK_CLIENT_ID","child_process_1","require","fs","gcpMetadata","os","path","crypto_1","transporters_1","computeclient_1","idtokenclient_1","envDetect_1","jwtclient_1","refreshclient_1","opts","checkIsGCE","undefined","jsonContent","cachedCredential","_cachedProjectId","projectId","keyFilename","keyFile","scopes","credentials","clientOptions","callback","getProjectIdAsync","then","r","Promise","resolve","_getDefaultProjectIdPromise","reject","getProductionProjectId","getFileProjectId","getDefaultServiceProjectId","getGCEProjectId","Error","optionsOrCallback","options","getApplicationDefaultAsync","credential","_tryGetApplicationCredentialsFromEnvironmentVariable","JWT","getProjectId","_tryGetApplicationCredentialsFromWellKnownFile","_checkIsGCE","isGCE","message","Compute","isAvailable","credentialsPath","process","env","length","_getApplicationCredentialsFromFilePath","location","_isWindows","home","join","existsSync","client","filePath","realpathSync","lstatSync","isFile","readStream","createReadStream","fromStream","json","type","UserRefreshClient","fromJSON","inputStream","fromStreamAsync","s","setEncoding","on","chunk","data","JSON","parse","_cacheClientFromJSON","err","apiKey","fromAPIKey","sys","platform","substring","toLowerCase","exec","stdout","configuration","properties","core","project","e","getClient","creds","getCredentialsAsync","client_email","private_key","instance","property","params","recursive","default","email","stream","targetAudience","IdTokenClient","idTokenProvider","getAccessToken","token","url","getRequestHeaders","uri","headers","assign","request","getEnv","crypto","createCrypto","key","sign","getCredentials","method","payload","encodeBase64StringUtf8","res","signedBlob","DefaultTransporter"],"mappings":"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","sourcesContent":["\"use strict\";\r\n// Copyright 2019 Google LLC\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.GoogleAuth = exports.CLOUD_SDK_CLIENT_ID = void 0;\r\nconst child_process_1 = require(\"child_process\");\r\nconst fs = require(\"fs\");\r\nconst gcpMetadata = require(\"gcp-metadata\");\r\nconst os = require(\"os\");\r\nconst path = require(\"path\");\r\nconst crypto_1 = require(\"../crypto/crypto\");\r\nconst transporters_1 = require(\"../transporters\");\r\nconst computeclient_1 = require(\"./computeclient\");\r\nconst idtokenclient_1 = require(\"./idtokenclient\");\r\nconst envDetect_1 = require(\"./envDetect\");\r\nconst jwtclient_1 = require(\"./jwtclient\");\r\nconst refreshclient_1 = require(\"./refreshclient\");\r\nexports.CLOUD_SDK_CLIENT_ID = '764086051850-6qr4p6gpi6hn506pt8ejuq83di341hur.apps.googleusercontent.com';\r\nclass GoogleAuth {\r\n    constructor(opts) {\r\n        /**\r\n         * Caches a value indicating whether the auth layer is running on Google\r\n         * Compute Engine.\r\n         * @private\r\n         */\r\n        this.checkIsGCE = undefined;\r\n        // To save the contents of the JSON credential file\r\n        this.jsonContent = null;\r\n        this.cachedCredential = null;\r\n        opts = opts || {};\r\n        this._cachedProjectId = opts.projectId || null;\r\n        this.keyFilename = opts.keyFilename || opts.keyFile;\r\n        this.scopes = opts.scopes;\r\n        this.jsonContent = opts.credentials || null;\r\n        this.clientOptions = opts.clientOptions;\r\n    }\r\n    // Note:  this properly is only public to satisify unit tests.\r\n    // https://github.com/Microsoft/TypeScript/issues/5228\r\n    get isGCE() {\r\n        return this.checkIsGCE;\r\n    }\r\n    getProjectId(callback) {\r\n        if (callback) {\r\n            this.getProjectIdAsync().then(r => callback(null, r), callback);\r\n        }\r\n        else {\r\n            return this.getProjectIdAsync();\r\n        }\r\n    }\r\n    getProjectIdAsync() {\r\n        if (this._cachedProjectId) {\r\n            return Promise.resolve(this._cachedProjectId);\r\n        }\r\n        // In implicit case, supports three environments. In order of precedence,\r\n        // the implicit environments are:\r\n        // - GCLOUD_PROJECT or GOOGLE_CLOUD_PROJECT environment variable\r\n        // - GOOGLE_APPLICATION_CREDENTIALS JSON file\r\n        // - Cloud SDK: `gcloud config config-helper --format json`\r\n        // - GCE project ID from metadata server)\r\n        if (!this._getDefaultProjectIdPromise) {\r\n            // TODO: refactor the below code so that it doesn't mix and match\r\n            // promises and async/await.\r\n            this._getDefaultProjectIdPromise = new Promise(\r\n            // eslint-disable-next-line no-async-promise-executor\r\n            async (resolve, reject) => {\r\n                try {\r\n                    const projectId = this.getProductionProjectId() ||\r\n                        (await this.getFileProjectId()) ||\r\n                        (await this.getDefaultServiceProjectId()) ||\r\n                        (await this.getGCEProjectId());\r\n                    this._cachedProjectId = projectId;\r\n                    if (!projectId) {\r\n                        throw new Error('Unable to detect a Project Id in the current environment. \\n' +\r\n                            'To learn more about authentication and Google APIs, visit: \\n' +\r\n                            'https://cloud.google.com/docs/authentication/getting-started');\r\n                    }\r\n                    resolve(projectId);\r\n                }\r\n                catch (e) {\r\n                    reject(e);\r\n                }\r\n            });\r\n        }\r\n        return this._getDefaultProjectIdPromise;\r\n    }\r\n    getApplicationDefault(optionsOrCallback = {}, callback) {\r\n        let options;\r\n        if (typeof optionsOrCallback === 'function') {\r\n            callback = optionsOrCallback;\r\n        }\r\n        else {\r\n            options = optionsOrCallback;\r\n        }\r\n        if (callback) {\r\n            this.getApplicationDefaultAsync(options).then(r => callback(null, r.credential, r.projectId), callback);\r\n        }\r\n        else {\r\n            return this.getApplicationDefaultAsync(options);\r\n        }\r\n    }\r\n    async getApplicationDefaultAsync(options = {}) {\r\n        // If we've already got a cached credential, just return it.\r\n        if (this.cachedCredential) {\r\n            return {\r\n                credential: this.cachedCredential,\r\n                projectId: await this.getProjectIdAsync(),\r\n            };\r\n        }\r\n        let credential;\r\n        let projectId;\r\n        // Check for the existence of a local environment variable pointing to the\r\n        // location of the credential file. This is typically used in local\r\n        // developer scenarios.\r\n        credential = await this._tryGetApplicationCredentialsFromEnvironmentVariable(options);\r\n        if (credential) {\r\n            if (credential instanceof jwtclient_1.JWT) {\r\n                credential.scopes = this.scopes;\r\n            }\r\n            this.cachedCredential = credential;\r\n            projectId = await this.getProjectId();\r\n            return { credential, projectId };\r\n        }\r\n        // Look in the well-known credential file location.\r\n        credential = await this._tryGetApplicationCredentialsFromWellKnownFile(options);\r\n        if (credential) {\r\n            if (credential instanceof jwtclient_1.JWT) {\r\n                credential.scopes = this.scopes;\r\n            }\r\n            this.cachedCredential = credential;\r\n            projectId = await this.getProjectId();\r\n            return { credential, projectId };\r\n        }\r\n        // Determine if we're running on GCE.\r\n        let isGCE;\r\n        try {\r\n            isGCE = await this._checkIsGCE();\r\n        }\r\n        catch (e) {\r\n            e.message = `Unexpected error determining execution environment: ${e.message}`;\r\n            throw e;\r\n        }\r\n        if (!isGCE) {\r\n            // We failed to find the default credentials. Bail out with an error.\r\n            throw new Error('Could not load the default credentials. Browse to https://cloud.google.com/docs/authentication/getting-started for more information.');\r\n        }\r\n        // For GCE, just return a default ComputeClient. It will take care of\r\n        // the rest.\r\n        options.scopes = this.scopes;\r\n        this.cachedCredential = new computeclient_1.Compute(options);\r\n        projectId = await this.getProjectId();\r\n        return { projectId, credential: this.cachedCredential };\r\n    }\r\n    /**\r\n     * Determines whether the auth layer is running on Google Compute Engine.\r\n     * @returns A promise that resolves with the boolean.\r\n     * @api private\r\n     */\r\n    async _checkIsGCE() {\r\n        if (this.checkIsGCE === undefined) {\r\n            this.checkIsGCE = await gcpMetadata.isAvailable();\r\n        }\r\n        return this.checkIsGCE;\r\n    }\r\n    /**\r\n     * Attempts to load default credentials from the environment variable path..\r\n     * @returns Promise that resolves with the OAuth2Client or null.\r\n     * @api private\r\n     */\r\n    async _tryGetApplicationCredentialsFromEnvironmentVariable(options) {\r\n        const credentialsPath = process.env['GOOGLE_APPLICATION_CREDENTIALS'] ||\r\n            process.env['google_application_credentials'];\r\n        if (!credentialsPath || credentialsPath.length === 0) {\r\n            return null;\r\n        }\r\n        try {\r\n            return this._getApplicationCredentialsFromFilePath(credentialsPath, options);\r\n        }\r\n        catch (e) {\r\n            e.message = `Unable to read the credential file specified by the GOOGLE_APPLICATION_CREDENTIALS environment variable: ${e.message}`;\r\n            throw e;\r\n        }\r\n    }\r\n    /**\r\n     * Attempts to load default credentials from a well-known file location\r\n     * @return Promise that resolves with the OAuth2Client or null.\r\n     * @api private\r\n     */\r\n    async _tryGetApplicationCredentialsFromWellKnownFile(options) {\r\n        // First, figure out the location of the file, depending upon the OS type.\r\n        let location = null;\r\n        if (this._isWindows()) {\r\n            // Windows\r\n            location = process.env['APPDATA'];\r\n        }\r\n        else {\r\n            // Linux or Mac\r\n            const home = process.env['HOME'];\r\n            if (home) {\r\n                location = path.join(home, '.config');\r\n            }\r\n        }\r\n        // If we found the root path, expand it.\r\n        if (location) {\r\n            location = path.join(location, 'gcloud', 'application_default_credentials.json');\r\n            if (!fs.existsSync(location)) {\r\n                location = null;\r\n            }\r\n        }\r\n        // The file does not exist.\r\n        if (!location) {\r\n            return null;\r\n        }\r\n        // The file seems to exist. Try to use it.\r\n        const client = await this._getApplicationCredentialsFromFilePath(location, options);\r\n        return client;\r\n    }\r\n    /**\r\n     * Attempts to load default credentials from a file at the given path..\r\n     * @param filePath The path to the file to read.\r\n     * @returns Promise that resolves with the OAuth2Client\r\n     * @api private\r\n     */\r\n    async _getApplicationCredentialsFromFilePath(filePath, options = {}) {\r\n        // Make sure the path looks like a string.\r\n        if (!filePath || filePath.length === 0) {\r\n            throw new Error('The file path is invalid.');\r\n        }\r\n        // Make sure there is a file at the path. lstatSync will throw if there is\r\n        // nothing there.\r\n        try {\r\n            // Resolve path to actual file in case of symlink. Expect a thrown error\r\n            // if not resolvable.\r\n            filePath = fs.realpathSync(filePath);\r\n            if (!fs.lstatSync(filePath).isFile()) {\r\n                throw new Error();\r\n            }\r\n        }\r\n        catch (err) {\r\n            err.message = `The file at ${filePath} does not exist, or it is not a file. ${err.message}`;\r\n            throw err;\r\n        }\r\n        // Now open a read stream on the file, and parse it.\r\n        const readStream = fs.createReadStream(filePath);\r\n        return this.fromStream(readStream, options);\r\n    }\r\n    /**\r\n     * Create a credentials instance using the given input options.\r\n     * @param json The input object.\r\n     * @param options The JWT or UserRefresh options for the client\r\n     * @returns JWT or UserRefresh Client with data\r\n     */\r\n    fromJSON(json, options) {\r\n        let client;\r\n        if (!json) {\r\n            throw new Error('Must pass in a JSON object containing the Google auth settings.');\r\n        }\r\n        options = options || {};\r\n        if (json.type === 'authorized_user') {\r\n            client = new refreshclient_1.UserRefreshClient(options);\r\n        }\r\n        else {\r\n            options.scopes = this.scopes;\r\n            client = new jwtclient_1.JWT(options);\r\n        }\r\n        client.fromJSON(json);\r\n        return client;\r\n    }\r\n    /**\r\n     * Return a JWT or UserRefreshClient from JavaScript object, caching both the\r\n     * object used to instantiate and the client.\r\n     * @param json The input object.\r\n     * @param options The JWT or UserRefresh options for the client\r\n     * @returns JWT or UserRefresh Client with data\r\n     */\r\n    _cacheClientFromJSON(json, options) {\r\n        let client;\r\n        // create either a UserRefreshClient or JWT client.\r\n        options = options || {};\r\n        if (json.type === 'authorized_user') {\r\n            client = new refreshclient_1.UserRefreshClient(options);\r\n        }\r\n        else {\r\n            options.scopes = this.scopes;\r\n            client = new jwtclient_1.JWT(options);\r\n        }\r\n        client.fromJSON(json);\r\n        // cache both raw data used to instantiate client and client itself.\r\n        this.jsonContent = json;\r\n        this.cachedCredential = client;\r\n        return this.cachedCredential;\r\n    }\r\n    fromStream(inputStream, optionsOrCallback = {}, callback) {\r\n        let options = {};\r\n        if (typeof optionsOrCallback === 'function') {\r\n            callback = optionsOrCallback;\r\n        }\r\n        else {\r\n            options = optionsOrCallback;\r\n        }\r\n        if (callback) {\r\n            this.fromStreamAsync(inputStream, options).then(r => callback(null, r), callback);\r\n        }\r\n        else {\r\n            return this.fromStreamAsync(inputStream, options);\r\n        }\r\n    }\r\n    fromStreamAsync(inputStream, options) {\r\n        return new Promise((resolve, reject) => {\r\n            if (!inputStream) {\r\n                throw new Error('Must pass in a stream containing the Google auth settings.');\r\n            }\r\n            let s = '';\r\n            inputStream\r\n                .setEncoding('utf8')\r\n                .on('error', reject)\r\n                .on('data', chunk => (s += chunk))\r\n                .on('end', () => {\r\n                try {\r\n                    const data = JSON.parse(s);\r\n                    const r = this._cacheClientFromJSON(data, options);\r\n                    return resolve(r);\r\n                }\r\n                catch (err) {\r\n                    return reject(err);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Create a credentials instance using the given API key string.\r\n     * @param apiKey The API key string\r\n     * @param options An optional options object.\r\n     * @returns A JWT loaded from the key\r\n     */\r\n    fromAPIKey(apiKey, options) {\r\n        options = options || {};\r\n        const client = new jwtclient_1.JWT(options);\r\n        client.fromAPIKey(apiKey);\r\n        return client;\r\n    }\r\n    /**\r\n     * Determines whether the current operating system is Windows.\r\n     * @api private\r\n     */\r\n    _isWindows() {\r\n        const sys = os.platform();\r\n        if (sys && sys.length >= 3) {\r\n            if (sys.substring(0, 3).toLowerCase() === 'win') {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Run the Google Cloud SDK command that prints the default project ID\r\n     */\r\n    async getDefaultServiceProjectId() {\r\n        return new Promise(resolve => {\r\n            child_process_1.exec('gcloud config config-helper --format json', (err, stdout) => {\r\n                if (!err && stdout) {\r\n                    try {\r\n                        const projectId = JSON.parse(stdout).configuration.properties.core\r\n                            .project;\r\n                        resolve(projectId);\r\n                        return;\r\n                    }\r\n                    catch (e) {\r\n                        // ignore errors\r\n                    }\r\n                }\r\n                resolve(null);\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Loads the project id from environment variables.\r\n     * @api private\r\n     */\r\n    getProductionProjectId() {\r\n        return (process.env['GCLOUD_PROJECT'] ||\r\n            process.env['GOOGLE_CLOUD_PROJECT'] ||\r\n            process.env['gcloud_project'] ||\r\n            process.env['google_cloud_project']);\r\n    }\r\n    /**\r\n     * Loads the project id from the GOOGLE_APPLICATION_CREDENTIALS json file.\r\n     * @api private\r\n     */\r\n    async getFileProjectId() {\r\n        if (this.cachedCredential) {\r\n            // Try to read the project ID from the cached credentials file\r\n            return this.cachedCredential.projectId;\r\n        }\r\n        // Ensure the projectId is loaded from the keyFile if available.\r\n        if (this.keyFilename) {\r\n            const creds = await this.getClient();\r\n            if (creds && creds.projectId) {\r\n                return creds.projectId;\r\n            }\r\n        }\r\n        // Try to load a credentials file and read its project ID\r\n        const r = await this._tryGetApplicationCredentialsFromEnvironmentVariable();\r\n        if (r) {\r\n            return r.projectId;\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Gets the Compute Engine project ID if it can be inferred.\r\n     */\r\n    async getGCEProjectId() {\r\n        try {\r\n            const r = await gcpMetadata.project('project-id');\r\n            return r;\r\n        }\r\n        catch (e) {\r\n            // Ignore any errors\r\n            return null;\r\n        }\r\n    }\r\n    getCredentials(callback) {\r\n        if (callback) {\r\n            this.getCredentialsAsync().then(r => callback(null, r), callback);\r\n        }\r\n        else {\r\n            return this.getCredentialsAsync();\r\n        }\r\n    }\r\n    async getCredentialsAsync() {\r\n        await this.getClient();\r\n        if (this.jsonContent) {\r\n            const credential = {\r\n                client_email: this.jsonContent.client_email,\r\n                private_key: this.jsonContent.private_key,\r\n            };\r\n            return credential;\r\n        }\r\n        const isGCE = await this._checkIsGCE();\r\n        if (!isGCE) {\r\n            throw new Error('Unknown error.');\r\n        }\r\n        // For GCE, return the service account details from the metadata server\r\n        // NOTE: The trailing '/' at the end of service-accounts/ is very important!\r\n        // The GCF metadata server doesn't respect querystring params if this / is\r\n        // not included.\r\n        const data = await gcpMetadata.instance({\r\n            property: 'service-accounts/',\r\n            params: { recursive: 'true' },\r\n        });\r\n        if (!data || !data.default || !data.default.email) {\r\n            throw new Error('Failure from metadata server.');\r\n        }\r\n        return { client_email: data.default.email };\r\n    }\r\n    /**\r\n     * Automatically obtain a client based on the provided configuration.  If no\r\n     * options were passed, use Application Default Credentials.\r\n     */\r\n    async getClient(options) {\r\n        if (options) {\r\n            throw new Error('Passing options to getClient is forbidden in v5.0.0. Use new GoogleAuth(opts) instead.');\r\n        }\r\n        if (!this.cachedCredential) {\r\n            if (this.jsonContent) {\r\n                this._cacheClientFromJSON(this.jsonContent, this.clientOptions);\r\n            }\r\n            else if (this.keyFilename) {\r\n                const filePath = path.resolve(this.keyFilename);\r\n                const stream = fs.createReadStream(filePath);\r\n                await this.fromStreamAsync(stream, this.clientOptions);\r\n            }\r\n            else {\r\n                await this.getApplicationDefaultAsync(this.clientOptions);\r\n            }\r\n        }\r\n        return this.cachedCredential;\r\n    }\r\n    /**\r\n     * Creates a client which will fetch an ID token for authorization.\r\n     * @param targetAudience the audience for the fetched ID token.\r\n     * @returns IdTokenClient for making HTTP calls authenticated with ID tokens.\r\n     */\r\n    async getIdTokenClient(targetAudience) {\r\n        const client = await this.getClient();\r\n        if (!('fetchIdToken' in client)) {\r\n            throw new Error('Cannot fetch ID token in this environment, use GCE or set the GOOGLE_APPLICATION_CREDENTIALS environment variable to a service account credentials JSON file.');\r\n        }\r\n        return new idtokenclient_1.IdTokenClient({ targetAudience, idTokenProvider: client });\r\n    }\r\n    /**\r\n     * Automatically obtain application default credentials, and return\r\n     * an access token for making requests.\r\n     */\r\n    async getAccessToken() {\r\n        const client = await this.getClient();\r\n        return (await client.getAccessToken()).token;\r\n    }\r\n    /**\r\n     * Obtain the HTTP headers that will provide authorization for a given\r\n     * request.\r\n     */\r\n    async getRequestHeaders(url) {\r\n        const client = await this.getClient();\r\n        return client.getRequestHeaders(url);\r\n    }\r\n    /**\r\n     * Obtain credentials for a request, then attach the appropriate headers to\r\n     * the request options.\r\n     * @param opts Axios or Request options on which to attach the headers\r\n     */\r\n    async authorizeRequest(opts) {\r\n        opts = opts || {};\r\n        const url = opts.url || opts.uri;\r\n        const client = await this.getClient();\r\n        const headers = await client.getRequestHeaders(url);\r\n        opts.headers = Object.assign(opts.headers || {}, headers);\r\n        return opts;\r\n    }\r\n    /**\r\n     * Automatically obtain application default credentials, and make an\r\n     * HTTP request using the given options.\r\n     * @param opts Axios request options for the HTTP request.\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    async request(opts) {\r\n        const client = await this.getClient();\r\n        return client.request(opts);\r\n    }\r\n    /**\r\n     * Determine the compute environment in which the code is running.\r\n     */\r\n    getEnv() {\r\n        return envDetect_1.getEnv();\r\n    }\r\n    /**\r\n     * Sign the given data with the current private key, or go out\r\n     * to the IAM API to sign it.\r\n     * @param data The data to be signed.\r\n     */\r\n    async sign(data) {\r\n        const client = await this.getClient();\r\n        const crypto = crypto_1.createCrypto();\r\n        if (client instanceof jwtclient_1.JWT && client.key) {\r\n            const sign = await crypto.sign(client.key, data);\r\n            return sign;\r\n        }\r\n        const projectId = await this.getProjectId();\r\n        if (!projectId) {\r\n            throw new Error('Cannot sign data without a project ID.');\r\n        }\r\n        const creds = await this.getCredentials();\r\n        if (!creds.client_email) {\r\n            throw new Error('Cannot sign data without `client_email`.');\r\n        }\r\n        const url = `https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/${creds.client_email}:signBlob`;\r\n        const res = await this.request({\r\n            method: 'POST',\r\n            url,\r\n            data: {\r\n                payload: crypto.encodeBase64StringUtf8(data),\r\n            },\r\n        });\r\n        return res.data.signedBlob;\r\n    }\r\n}\r\nexports.GoogleAuth = GoogleAuth;\r\n/**\r\n * Export DefaultTransporter as a static property of the class.\r\n */\r\nGoogleAuth.DefaultTransporter = transporters_1.DefaultTransporter;\r\n//# sourceMappingURL=googleauth.js.map"]},"metadata":{},"sourceType":"script"}