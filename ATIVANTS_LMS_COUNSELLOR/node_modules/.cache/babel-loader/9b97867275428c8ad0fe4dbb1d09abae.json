{"ast":null,"code":"\"use strict\";\n/**\r\n * Copyright 2018 Google LLC\r\n *\r\n * Distributed under MIT license.\r\n * See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\r\n */\n\nvar _createClass = require(\"C:\\\\Users\\\\Activants46\\\\Desktop\\\\githubLMS\\\\counsellorserver\\\\ATIVANTS_LMS_COUNSELLOR\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Activants46\\\\Desktop\\\\githubLMS\\\\counsellorserver\\\\ATIVANTS_LMS_COUNSELLOR\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _inherits = require(\"C:\\\\Users\\\\Activants46\\\\Desktop\\\\githubLMS\\\\counsellorserver\\\\ATIVANTS_LMS_COUNSELLOR\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:\\\\Users\\\\Activants46\\\\Desktop\\\\githubLMS\\\\counsellorserver\\\\ATIVANTS_LMS_COUNSELLOR\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\n\nvar _wrapNativeSuper = require(\"C:\\\\Users\\\\Activants46\\\\Desktop\\\\githubLMS\\\\counsellorserver\\\\ATIVANTS_LMS_COUNSELLOR\\\\node_modules\\\\@babel\\\\runtime/helpers/wrapNativeSuper\");\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\Activants46\\\\Desktop\\\\githubLMS\\\\counsellorserver\\\\ATIVANTS_LMS_COUNSELLOR\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\Activants46\\\\Desktop\\\\githubLMS\\\\counsellorserver\\\\ATIVANTS_LMS_COUNSELLOR\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GoogleToken = void 0;\n\nvar fs = require(\"fs\");\n\nvar gaxios_1 = require(\"gaxios\");\n\nvar jws = require(\"jws\");\n\nvar mime = require(\"mime\");\n\nvar util_1 = require(\"util\");\n\nvar readFile = fs.readFile ? util_1.promisify(fs.readFile) : /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          throw new ErrorWithCode('use key rather than keyFile.', 'MISSING_CREDENTIALS');\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n}));\nvar GOOGLE_TOKEN_URL = 'https://www.googleapis.com/oauth2/v4/token';\nvar GOOGLE_REVOKE_TOKEN_URL = 'https://accounts.google.com/o/oauth2/revoke?token=';\n\nvar ErrorWithCode = /*#__PURE__*/function (_Error) {\n  _inherits(ErrorWithCode, _Error);\n\n  var _super = _createSuper(ErrorWithCode);\n\n  function ErrorWithCode(message, code) {\n    var _this;\n\n    _classCallCheck(this, ErrorWithCode);\n\n    _this = _super.call(this, message);\n    _this.code = code;\n    return _this;\n  }\n\n  return ErrorWithCode;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nvar getPem;\n\nvar GoogleToken = /*#__PURE__*/function () {\n  /**\r\n   * Create a GoogleToken.\r\n   *\r\n   * @param options  Configuration object.\r\n   */\n  function GoogleToken(options) {\n    _classCallCheck(this, GoogleToken);\n\n    this.configure(options);\n  }\n\n  _createClass(GoogleToken, [{\n    key: \"hasExpired\",\n\n    /**\r\n     * Returns whether the token has expired.\r\n     *\r\n     * @return true if the token has expired, false otherwise.\r\n     */\n    value: function hasExpired() {\n      var now = new Date().getTime();\n\n      if (this.rawToken && this.expiresAt) {\n        return now >= this.expiresAt;\n      } else {\n        return true;\n      }\n    }\n  }, {\n    key: \"getToken\",\n    value: function getToken(callback) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (typeof callback === 'object') {\n        opts = callback;\n        callback = undefined;\n      }\n\n      opts = Object.assign({\n        forceRefresh: false\n      }, opts);\n\n      if (callback) {\n        var cb = callback;\n        this.getTokenAsync(opts).then(function (t) {\n          return cb(null, t);\n        }, callback);\n        return;\n      }\n\n      return this.getTokenAsync(opts);\n    }\n    /**\r\n     * Given a keyFile, extract the key and client email if available\r\n     * @param keyFile Path to a json, pem, or p12 file that contains the key.\r\n     * @returns an object with privateKey and clientEmail properties\r\n     */\n\n  }, {\n    key: \"getCredentials\",\n    value: function () {\n      var _getCredentials = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(keyFile) {\n        var mimeType, key, body, privateKey, clientEmail, _privateKey, _privateKey2;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                mimeType = mime.getType(keyFile);\n                _context2.t0 = mimeType;\n                _context2.next = _context2.t0 === 'application/json' ? 4 : _context2.t0 === 'application/x-x509-ca-cert' ? 13 : _context2.t0 === 'application/x-pkcs12' ? 17 : 25;\n                break;\n\n              case 4:\n                _context2.next = 6;\n                return readFile(keyFile, 'utf8');\n\n              case 6:\n                key = _context2.sent;\n                body = JSON.parse(key);\n                privateKey = body.private_key;\n                clientEmail = body.client_email;\n\n                if (!(!privateKey || !clientEmail)) {\n                  _context2.next = 12;\n                  break;\n                }\n\n                throw new ErrorWithCode('private_key and client_email are required.', 'MISSING_CREDENTIALS');\n\n              case 12:\n                return _context2.abrupt(\"return\", {\n                  privateKey: privateKey,\n                  clientEmail: clientEmail\n                });\n\n              case 13:\n                _context2.next = 15;\n                return readFile(keyFile, 'utf8');\n\n              case 15:\n                _privateKey = _context2.sent;\n                return _context2.abrupt(\"return\", {\n                  privateKey: _privateKey\n                });\n\n              case 17:\n                if (getPem) {\n                  _context2.next = 21;\n                  break;\n                }\n\n                _context2.next = 20;\n                return Promise.resolve().then(function () {\n                  return require('google-p12-pem');\n                });\n\n              case 20:\n                getPem = _context2.sent.getPem;\n\n              case 21:\n                _context2.next = 23;\n                return getPem(keyFile);\n\n              case 23:\n                _privateKey2 = _context2.sent;\n                return _context2.abrupt(\"return\", {\n                  privateKey: _privateKey2\n                });\n\n              case 25:\n                throw new ErrorWithCode('Unknown certificate type. Type is determined based on file extension. ' + 'Current supported extensions are *.json, *.pem, and *.p12.', 'UNKNOWN_CERTIFICATE_TYPE');\n\n              case 26:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function getCredentials(_x) {\n        return _getCredentials.apply(this, arguments);\n      }\n\n      return getCredentials;\n    }()\n  }, {\n    key: \"getTokenAsync\",\n    value: function () {\n      var _getTokenAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(opts) {\n        var creds;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(this.hasExpired() === false && opts.forceRefresh === false)) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", Promise.resolve(this.rawToken));\n\n              case 2:\n                if (!(!this.key && !this.keyFile)) {\n                  _context3.next = 4;\n                  break;\n                }\n\n                throw new Error('No key or keyFile set.');\n\n              case 4:\n                if (!(!this.key && this.keyFile)) {\n                  _context3.next = 11;\n                  break;\n                }\n\n                _context3.next = 7;\n                return this.getCredentials(this.keyFile);\n\n              case 7:\n                creds = _context3.sent;\n                this.key = creds.privateKey;\n                this.iss = creds.clientEmail || this.iss;\n\n                if (!creds.clientEmail) {\n                  this.ensureEmail();\n                }\n\n              case 11:\n                return _context3.abrupt(\"return\", this.requestToken());\n\n              case 12:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getTokenAsync(_x2) {\n        return _getTokenAsync.apply(this, arguments);\n      }\n\n      return getTokenAsync;\n    }()\n  }, {\n    key: \"ensureEmail\",\n    value: function ensureEmail() {\n      if (!this.iss) {\n        throw new ErrorWithCode('email is required.', 'MISSING_CREDENTIALS');\n      }\n    }\n  }, {\n    key: \"revokeToken\",\n    value: function revokeToken(callback) {\n      if (callback) {\n        this.revokeTokenAsync().then(function () {\n          return callback();\n        }, callback);\n        return;\n      }\n\n      return this.revokeTokenAsync();\n    }\n  }, {\n    key: \"revokeTokenAsync\",\n    value: function () {\n      var _revokeTokenAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var url;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (this.accessToken) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                throw new Error('No token to revoke.');\n\n              case 2:\n                url = GOOGLE_REVOKE_TOKEN_URL + this.accessToken;\n                _context4.next = 5;\n                return gaxios_1.request({\n                  url: url\n                });\n\n              case 5:\n                this.configure({\n                  email: this.iss,\n                  sub: this.sub,\n                  key: this.key,\n                  keyFile: this.keyFile,\n                  scope: this.scope,\n                  additionalClaims: this.additionalClaims\n                });\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function revokeTokenAsync() {\n        return _revokeTokenAsync.apply(this, arguments);\n      }\n\n      return revokeTokenAsync;\n    }()\n    /**\r\n     * Configure the GoogleToken for re-use.\r\n     * @param  {object} options Configuration object.\r\n     */\n\n  }, {\n    key: \"configure\",\n    value: function configure() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.keyFile = options.keyFile;\n      this.key = options.key;\n      this.rawToken = undefined;\n      this.iss = options.email || options.iss;\n      this.sub = options.sub;\n      this.additionalClaims = options.additionalClaims;\n\n      if (typeof options.scope === 'object') {\n        this.scope = options.scope.join(' ');\n      } else {\n        this.scope = options.scope;\n      }\n    }\n    /**\r\n     * Request the token from Google.\r\n     */\n\n  }, {\n    key: \"requestToken\",\n    value: function () {\n      var _requestToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var iat, additionalClaims, payload, signedJWT, r, body, desc;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                iat = Math.floor(new Date().getTime() / 1000);\n                additionalClaims = this.additionalClaims || {};\n                payload = Object.assign({\n                  iss: this.iss,\n                  scope: this.scope,\n                  aud: GOOGLE_TOKEN_URL,\n                  exp: iat + 3600,\n                  iat: iat,\n                  sub: this.sub\n                }, additionalClaims);\n                signedJWT = jws.sign({\n                  header: {\n                    alg: 'RS256'\n                  },\n                  payload: payload,\n                  secret: this.key\n                });\n                _context5.prev = 4;\n                _context5.next = 7;\n                return gaxios_1.request({\n                  method: 'POST',\n                  url: GOOGLE_TOKEN_URL,\n                  data: {\n                    grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n                    assertion: signedJWT\n                  },\n                  headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded'\n                  },\n                  responseType: 'json'\n                });\n\n              case 7:\n                r = _context5.sent;\n                this.rawToken = r.data;\n                this.expiresAt = r.data.expires_in === null || r.data.expires_in === undefined ? undefined : (iat + r.data.expires_in) * 1000;\n                return _context5.abrupt(\"return\", this.rawToken);\n\n              case 13:\n                _context5.prev = 13;\n                _context5.t0 = _context5[\"catch\"](4);\n                this.rawToken = undefined;\n                this.tokenExpires = undefined;\n                body = _context5.t0.response && _context5.t0.response.data ? _context5.t0.response.data : {};\n\n                if (body.error) {\n                  desc = body.error_description ? \": \".concat(body.error_description) : '';\n                  _context5.t0.message = \"\".concat(body.error).concat(desc);\n                }\n\n                throw _context5.t0;\n\n              case 20:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[4, 13]]);\n      }));\n\n      function requestToken() {\n        return _requestToken.apply(this, arguments);\n      }\n\n      return requestToken;\n    }()\n  }, {\n    key: \"accessToken\",\n    get: function get() {\n      return this.rawToken ? this.rawToken.access_token : undefined;\n    }\n  }, {\n    key: \"idToken\",\n    get: function get() {\n      return this.rawToken ? this.rawToken.id_token : undefined;\n    }\n  }, {\n    key: \"tokenType\",\n    get: function get() {\n      return this.rawToken ? this.rawToken.token_type : undefined;\n    }\n  }, {\n    key: \"refreshToken\",\n    get: function get() {\n      return this.rawToken ? this.rawToken.refresh_token : undefined;\n    }\n  }]);\n\n  return GoogleToken;\n}();\n\nexports.GoogleToken = GoogleToken;","map":{"version":3,"sources":["C:/Users/Activants46/Desktop/githubLMS/counsellorserver/ATIVANTS_LMS_COUNSELLOR/node_modules/gtoken/build/src/index.js"],"names":["Object","defineProperty","exports","value","GoogleToken","fs","require","gaxios_1","jws","mime","util_1","readFile","promisify","ErrorWithCode","GOOGLE_TOKEN_URL","GOOGLE_REVOKE_TOKEN_URL","message","code","Error","getPem","options","configure","now","Date","getTime","rawToken","expiresAt","callback","opts","undefined","assign","forceRefresh","cb","getTokenAsync","then","t","keyFile","mimeType","getType","key","body","JSON","parse","privateKey","private_key","clientEmail","client_email","Promise","resolve","hasExpired","getCredentials","creds","iss","ensureEmail","requestToken","revokeTokenAsync","accessToken","url","request","email","sub","scope","additionalClaims","join","iat","Math","floor","payload","aud","exp","signedJWT","sign","header","alg","secret","method","data","grant_type","assertion","headers","responseType","r","expires_in","tokenExpires","response","error","desc","error_description","access_token","id_token","token_type","refresh_token"],"mappings":"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","sourcesContent":["\"use strict\";\r\n/**\r\n * Copyright 2018 Google LLC\r\n *\r\n * Distributed under MIT license.\r\n * See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.GoogleToken = void 0;\r\nconst fs = require(\"fs\");\r\nconst gaxios_1 = require(\"gaxios\");\r\nconst jws = require(\"jws\");\r\nconst mime = require(\"mime\");\r\nconst util_1 = require(\"util\");\r\nconst readFile = fs.readFile\r\n    ? util_1.promisify(fs.readFile)\r\n    : async () => {\r\n        // if running in the web-browser, fs.readFile may not have been shimmed.\r\n        throw new ErrorWithCode('use key rather than keyFile.', 'MISSING_CREDENTIALS');\r\n    };\r\nconst GOOGLE_TOKEN_URL = 'https://www.googleapis.com/oauth2/v4/token';\r\nconst GOOGLE_REVOKE_TOKEN_URL = 'https://accounts.google.com/o/oauth2/revoke?token=';\r\nclass ErrorWithCode extends Error {\r\n    constructor(message, code) {\r\n        super(message);\r\n        this.code = code;\r\n    }\r\n}\r\nlet getPem;\r\nclass GoogleToken {\r\n    /**\r\n     * Create a GoogleToken.\r\n     *\r\n     * @param options  Configuration object.\r\n     */\r\n    constructor(options) {\r\n        this.configure(options);\r\n    }\r\n    get accessToken() {\r\n        return this.rawToken ? this.rawToken.access_token : undefined;\r\n    }\r\n    get idToken() {\r\n        return this.rawToken ? this.rawToken.id_token : undefined;\r\n    }\r\n    get tokenType() {\r\n        return this.rawToken ? this.rawToken.token_type : undefined;\r\n    }\r\n    get refreshToken() {\r\n        return this.rawToken ? this.rawToken.refresh_token : undefined;\r\n    }\r\n    /**\r\n     * Returns whether the token has expired.\r\n     *\r\n     * @return true if the token has expired, false otherwise.\r\n     */\r\n    hasExpired() {\r\n        const now = new Date().getTime();\r\n        if (this.rawToken && this.expiresAt) {\r\n            return now >= this.expiresAt;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n    getToken(callback, opts = {}) {\r\n        if (typeof callback === 'object') {\r\n            opts = callback;\r\n            callback = undefined;\r\n        }\r\n        opts = Object.assign({\r\n            forceRefresh: false,\r\n        }, opts);\r\n        if (callback) {\r\n            const cb = callback;\r\n            this.getTokenAsync(opts).then(t => cb(null, t), callback);\r\n            return;\r\n        }\r\n        return this.getTokenAsync(opts);\r\n    }\r\n    /**\r\n     * Given a keyFile, extract the key and client email if available\r\n     * @param keyFile Path to a json, pem, or p12 file that contains the key.\r\n     * @returns an object with privateKey and clientEmail properties\r\n     */\r\n    async getCredentials(keyFile) {\r\n        const mimeType = mime.getType(keyFile);\r\n        switch (mimeType) {\r\n            case 'application/json': {\r\n                // *.json file\r\n                const key = await readFile(keyFile, 'utf8');\r\n                const body = JSON.parse(key);\r\n                const privateKey = body.private_key;\r\n                const clientEmail = body.client_email;\r\n                if (!privateKey || !clientEmail) {\r\n                    throw new ErrorWithCode('private_key and client_email are required.', 'MISSING_CREDENTIALS');\r\n                }\r\n                return { privateKey, clientEmail };\r\n            }\r\n            case 'application/x-x509-ca-cert': {\r\n                // *.pem file\r\n                const privateKey = await readFile(keyFile, 'utf8');\r\n                return { privateKey };\r\n            }\r\n            case 'application/x-pkcs12': {\r\n                // *.p12 file\r\n                // NOTE:  The loading of `google-p12-pem` is deferred for performance\r\n                // reasons.  The `node-forge` npm module in `google-p12-pem` adds a fair\r\n                // bit time to overall module loading, and is likely not frequently\r\n                // used.  In a future release, p12 support will be entirely removed.\r\n                if (!getPem) {\r\n                    getPem = (await Promise.resolve().then(() => require('google-p12-pem'))).getPem;\r\n                }\r\n                const privateKey = await getPem(keyFile);\r\n                return { privateKey };\r\n            }\r\n            default:\r\n                throw new ErrorWithCode('Unknown certificate type. Type is determined based on file extension. ' +\r\n                    'Current supported extensions are *.json, *.pem, and *.p12.', 'UNKNOWN_CERTIFICATE_TYPE');\r\n        }\r\n    }\r\n    async getTokenAsync(opts) {\r\n        if (this.hasExpired() === false && opts.forceRefresh === false) {\r\n            return Promise.resolve(this.rawToken);\r\n        }\r\n        if (!this.key && !this.keyFile) {\r\n            throw new Error('No key or keyFile set.');\r\n        }\r\n        if (!this.key && this.keyFile) {\r\n            const creds = await this.getCredentials(this.keyFile);\r\n            this.key = creds.privateKey;\r\n            this.iss = creds.clientEmail || this.iss;\r\n            if (!creds.clientEmail) {\r\n                this.ensureEmail();\r\n            }\r\n        }\r\n        return this.requestToken();\r\n    }\r\n    ensureEmail() {\r\n        if (!this.iss) {\r\n            throw new ErrorWithCode('email is required.', 'MISSING_CREDENTIALS');\r\n        }\r\n    }\r\n    revokeToken(callback) {\r\n        if (callback) {\r\n            this.revokeTokenAsync().then(() => callback(), callback);\r\n            return;\r\n        }\r\n        return this.revokeTokenAsync();\r\n    }\r\n    async revokeTokenAsync() {\r\n        if (!this.accessToken) {\r\n            throw new Error('No token to revoke.');\r\n        }\r\n        const url = GOOGLE_REVOKE_TOKEN_URL + this.accessToken;\r\n        await gaxios_1.request({ url });\r\n        this.configure({\r\n            email: this.iss,\r\n            sub: this.sub,\r\n            key: this.key,\r\n            keyFile: this.keyFile,\r\n            scope: this.scope,\r\n            additionalClaims: this.additionalClaims,\r\n        });\r\n    }\r\n    /**\r\n     * Configure the GoogleToken for re-use.\r\n     * @param  {object} options Configuration object.\r\n     */\r\n    configure(options = {}) {\r\n        this.keyFile = options.keyFile;\r\n        this.key = options.key;\r\n        this.rawToken = undefined;\r\n        this.iss = options.email || options.iss;\r\n        this.sub = options.sub;\r\n        this.additionalClaims = options.additionalClaims;\r\n        if (typeof options.scope === 'object') {\r\n            this.scope = options.scope.join(' ');\r\n        }\r\n        else {\r\n            this.scope = options.scope;\r\n        }\r\n    }\r\n    /**\r\n     * Request the token from Google.\r\n     */\r\n    async requestToken() {\r\n        const iat = Math.floor(new Date().getTime() / 1000);\r\n        const additionalClaims = this.additionalClaims || {};\r\n        const payload = Object.assign({\r\n            iss: this.iss,\r\n            scope: this.scope,\r\n            aud: GOOGLE_TOKEN_URL,\r\n            exp: iat + 3600,\r\n            iat,\r\n            sub: this.sub,\r\n        }, additionalClaims);\r\n        const signedJWT = jws.sign({\r\n            header: { alg: 'RS256' },\r\n            payload,\r\n            secret: this.key,\r\n        });\r\n        try {\r\n            const r = await gaxios_1.request({\r\n                method: 'POST',\r\n                url: GOOGLE_TOKEN_URL,\r\n                data: {\r\n                    grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\r\n                    assertion: signedJWT,\r\n                },\r\n                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\r\n                responseType: 'json',\r\n            });\r\n            this.rawToken = r.data;\r\n            this.expiresAt =\r\n                r.data.expires_in === null || r.data.expires_in === undefined\r\n                    ? undefined\r\n                    : (iat + r.data.expires_in) * 1000;\r\n            return this.rawToken;\r\n        }\r\n        catch (e) {\r\n            this.rawToken = undefined;\r\n            this.tokenExpires = undefined;\r\n            const body = e.response && e.response.data ? e.response.data : {};\r\n            if (body.error) {\r\n                const desc = body.error_description\r\n                    ? `: ${body.error_description}`\r\n                    : '';\r\n                e.message = `${body.error}${desc}`;\r\n            }\r\n            throw e;\r\n        }\r\n    }\r\n}\r\nexports.GoogleToken = GoogleToken;\r\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}