{"ast":null,"code":"\"use strict\"; // Copyright 2018 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\Activants46\\\\Desktop\\\\githubLMS\\\\counsellorserver\\\\ATIVANTS_LMS_COUNSELLOR\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\Activants46\\\\Desktop\\\\githubLMS\\\\counsellorserver\\\\ATIVANTS_LMS_COUNSELLOR\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Activants46\\\\Desktop\\\\githubLMS\\\\counsellorserver\\\\ATIVANTS_LMS_COUNSELLOR\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Activants46\\\\Desktop\\\\githubLMS\\\\counsellorserver\\\\ATIVANTS_LMS_COUNSELLOR\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Gaxios = void 0;\n\nvar extend_1 = __importDefault(require(\"extend\"));\n\nvar node_fetch_1 = __importDefault(require(\"node-fetch\"));\n\nvar querystring_1 = __importDefault(require(\"querystring\"));\n\nvar is_stream_1 = __importDefault(require(\"is-stream\"));\n\nvar url_1 = __importDefault(require(\"url\"));\n\nvar common_1 = require(\"./common\");\n\nvar retry_1 = require(\"./retry\");\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable node/no-unsupported-features/node-builtins */\n\n\nvar URL = hasURL() ? window.URL : url_1.default.URL;\nvar fetch = hasFetch() ? window.fetch : node_fetch_1.default;\n\nfunction hasWindow() {\n  return typeof window !== 'undefined' && !!window;\n}\n\nfunction hasURL() {\n  return hasWindow() && !!window.URL;\n}\n\nfunction hasFetch() {\n  return hasWindow() && !!window.fetch;\n}\n\nvar HttpsProxyAgent; // Figure out if we should be using a proxy. Only if it's required, load\n// the https-proxy-agent module as it adds startup cost.\n\nfunction loadProxy() {\n  var proxy = process.env.HTTPS_PROXY || process.env.https_proxy || process.env.HTTP_PROXY || process.env.http_proxy;\n\n  if (proxy) {\n    HttpsProxyAgent = require('https-proxy-agent');\n  }\n\n  return proxy;\n}\n\nloadProxy();\n\nvar Gaxios = /*#__PURE__*/function () {\n  /**\r\n   * The Gaxios class is responsible for making HTTP requests.\r\n   * @param defaults The default set of options to be used for this instance.\r\n   */\n  function Gaxios(defaults) {\n    _classCallCheck(this, Gaxios);\n\n    this.agentCache = new Map();\n    this.defaults = defaults || {};\n  }\n  /**\r\n   * Perform an HTTP request with the given options.\r\n   * @param opts Set of HTTP options that will be used for this HTTP request.\r\n   */\n\n\n  _createClass(Gaxios, [{\n    key: \"request\",\n    value: function () {\n      var _request2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var opts,\n            _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                opts = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n                opts = this.validateOpts(opts);\n                return _context.abrupt(\"return\", this._request(opts));\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function request() {\n        return _request2.apply(this, arguments);\n      }\n\n      return request;\n    }()\n  }, {\n    key: \"_defaultAdapter\",\n    value: function () {\n      var _defaultAdapter2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(opts) {\n        var res, data;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return fetch(opts.url, opts);\n\n              case 2:\n                res = _context2.sent;\n                _context2.next = 5;\n                return this.getResponseData(opts, res);\n\n              case 5:\n                data = _context2.sent;\n                return _context2.abrupt(\"return\", this.translateResponse(opts, res, data));\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function _defaultAdapter(_x) {\n        return _defaultAdapter2.apply(this, arguments);\n      }\n\n      return _defaultAdapter;\n    }()\n    /**\r\n     * Internal, retryable version of the `request` method.\r\n     * @param opts Set of HTTP options that will be used for this HTTP request.\r\n     */\n\n  }, {\n    key: \"_request\",\n    value: function () {\n      var _request3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var opts,\n            translatedResponse,\n            err,\n            _yield$retry_1$getRet,\n            shouldRetry,\n            config,\n            _args3 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                opts = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {};\n                _context3.prev = 1;\n\n                if (!opts.adapter) {\n                  _context3.next = 8;\n                  break;\n                }\n\n                _context3.next = 5;\n                return opts.adapter(opts, this._defaultAdapter.bind(this));\n\n              case 5:\n                translatedResponse = _context3.sent;\n                _context3.next = 11;\n                break;\n\n              case 8:\n                _context3.next = 10;\n                return this._defaultAdapter(opts);\n\n              case 10:\n                translatedResponse = _context3.sent;\n\n              case 11:\n                if (opts.validateStatus(translatedResponse.status)) {\n                  _context3.next = 13;\n                  break;\n                }\n\n                throw new common_1.GaxiosError(\"Request failed with status code \".concat(translatedResponse.status), opts, translatedResponse);\n\n              case 13:\n                return _context3.abrupt(\"return\", translatedResponse);\n\n              case 16:\n                _context3.prev = 16;\n                _context3.t0 = _context3[\"catch\"](1);\n                err = _context3.t0;\n                err.config = opts;\n                _context3.next = 22;\n                return retry_1.getRetryConfig(_context3.t0);\n\n              case 22:\n                _yield$retry_1$getRet = _context3.sent;\n                shouldRetry = _yield$retry_1$getRet.shouldRetry;\n                config = _yield$retry_1$getRet.config;\n\n                if (!(shouldRetry && config)) {\n                  _context3.next = 28;\n                  break;\n                }\n\n                err.config.retryConfig.currentRetryAttempt = config.retryConfig.currentRetryAttempt;\n                return _context3.abrupt(\"return\", this._request(err.config));\n\n              case 28:\n                throw err;\n\n              case 29:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[1, 16]]);\n      }));\n\n      function _request() {\n        return _request3.apply(this, arguments);\n      }\n\n      return _request;\n    }()\n  }, {\n    key: \"getResponseData\",\n    value: function () {\n      var _getResponseData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(opts, res) {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.t0 = opts.responseType;\n                _context4.next = _context4.t0 === 'stream' ? 3 : _context4.t0 === 'json' ? 4 : _context4.t0 === 'arraybuffer' ? 9 : _context4.t0 === 'blob' ? 10 : 11;\n                break;\n\n              case 3:\n                return _context4.abrupt(\"return\", res.body);\n\n              case 4:\n                _context4.next = 6;\n                return res.text();\n\n              case 6:\n                data = _context4.sent;\n\n                try {\n                  data = JSON.parse(data);\n                } catch (_a) {// continue\n                }\n\n                return _context4.abrupt(\"return\", data);\n\n              case 9:\n                return _context4.abrupt(\"return\", res.arrayBuffer());\n\n              case 10:\n                return _context4.abrupt(\"return\", res.blob());\n\n              case 11:\n                return _context4.abrupt(\"return\", res.text());\n\n              case 12:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function getResponseData(_x2, _x3) {\n        return _getResponseData.apply(this, arguments);\n      }\n\n      return getResponseData;\n    }()\n    /**\r\n     * Validates the options, and merges them with defaults.\r\n     * @param opts The original options passed from the client.\r\n     */\n\n  }, {\n    key: \"validateOpts\",\n    value: function validateOpts(options) {\n      var opts = extend_1.default(true, {}, this.defaults, options);\n\n      if (!opts.url) {\n        throw new Error('URL is required.');\n      } // baseUrl has been deprecated, remove in 2.0\n\n\n      var baseUrl = opts.baseUrl || opts.baseURL;\n\n      if (baseUrl) {\n        opts.url = baseUrl + opts.url;\n      }\n\n      var parsedUrl = new URL(opts.url);\n      opts.url = \"\".concat(parsedUrl.origin).concat(parsedUrl.pathname);\n      opts.params = extend_1.default(querystring_1.default.parse(parsedUrl.search.substr(1)), // removes leading ?\n      opts.params);\n      opts.paramsSerializer = opts.paramsSerializer || this.paramsSerializer;\n\n      if (opts.params) {\n        parsedUrl.search = opts.paramsSerializer(opts.params);\n      }\n\n      opts.url = parsedUrl.href;\n\n      if (typeof options.maxContentLength === 'number') {\n        opts.size = options.maxContentLength;\n      }\n\n      if (typeof options.maxRedirects === 'number') {\n        opts.follow = options.maxRedirects;\n      }\n\n      opts.headers = opts.headers || {};\n\n      if (opts.data) {\n        if (is_stream_1.default.readable(opts.data)) {\n          opts.body = opts.data;\n        } else if (typeof opts.data === 'object') {\n          opts.body = JSON.stringify(opts.data); // Allow the user to specifiy their own content type,\n          // such as application/json-patch+json; for historical reasons this\n          // content type must currently be a json type, as we are relying on\n          // application/x-www-form-urlencoded (which is incompatible with\n          // upstream GCP APIs) being rewritten to application/json.\n          //\n          // TODO: refactor upstream dependencies to stop relying on this\n          // side-effect.\n\n          if (!opts.headers['Content-Type'] || !opts.headers['Content-Type'].includes('json')) {\n            opts.headers['Content-Type'] = 'application/json';\n          }\n        } else {\n          opts.body = opts.data;\n        }\n      }\n\n      opts.validateStatus = opts.validateStatus || this.validateStatus;\n      opts.responseType = opts.responseType || 'json';\n\n      if (!opts.headers['Accept'] && opts.responseType === 'json') {\n        opts.headers['Accept'] = 'application/json';\n      }\n\n      opts.method = opts.method || 'GET';\n      var proxy = loadProxy();\n\n      if (proxy) {\n        if (this.agentCache.has(proxy)) {\n          opts.agent = this.agentCache.get(proxy);\n        } else {\n          opts.agent = new HttpsProxyAgent(proxy);\n          this.agentCache.set(proxy, opts.agent);\n        }\n      }\n\n      return opts;\n    }\n    /**\r\n     * By default, throw for any non-2xx status code\r\n     * @param status status code from the HTTP response\r\n     */\n\n  }, {\n    key: \"validateStatus\",\n    value: function validateStatus(status) {\n      return status >= 200 && status < 300;\n    }\n    /**\r\n     * Encode a set of key/value pars into a querystring format (?foo=bar&baz=boo)\r\n     * @param params key value pars to encode\r\n     */\n\n  }, {\n    key: \"paramsSerializer\",\n    value: function paramsSerializer(params) {\n      return querystring_1.default.stringify(params);\n    }\n  }, {\n    key: \"translateResponse\",\n    value: function translateResponse(opts, res, data) {\n      // headers need to be converted from a map to an obj\n      var headers = {};\n      res.headers.forEach(function (value, key) {\n        headers[key] = value;\n      });\n      return {\n        config: opts,\n        data: data,\n        headers: headers,\n        status: res.status,\n        statusText: res.statusText,\n        // XMLHttpRequestLike\n        request: {\n          responseURL: res.url\n        }\n      };\n    }\n  }]);\n\n  return Gaxios;\n}();\n\nexports.Gaxios = Gaxios;","map":{"version":3,"sources":["../../src/gaxios.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\r\n// Copyright 2018 Google LLC\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//    http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Gaxios = void 0;\r\nconst extend_1 = __importDefault(require(\"extend\"));\r\nconst node_fetch_1 = __importDefault(require(\"node-fetch\"));\r\nconst querystring_1 = __importDefault(require(\"querystring\"));\r\nconst is_stream_1 = __importDefault(require(\"is-stream\"));\r\nconst url_1 = __importDefault(require(\"url\"));\r\nconst common_1 = require(\"./common\");\r\nconst retry_1 = require(\"./retry\");\r\n/* eslint-disable @typescript-eslint/no-explicit-any */\r\n/* eslint-disable node/no-unsupported-features/node-builtins */\r\nconst URL = hasURL() ? window.URL : url_1.default.URL;\r\nconst fetch = hasFetch() ? window.fetch : node_fetch_1.default;\r\nfunction hasWindow() {\r\n    return typeof window !== 'undefined' && !!window;\r\n}\r\nfunction hasURL() {\r\n    return hasWindow() && !!window.URL;\r\n}\r\nfunction hasFetch() {\r\n    return hasWindow() && !!window.fetch;\r\n}\r\nlet HttpsProxyAgent;\r\n// Figure out if we should be using a proxy. Only if it's required, load\r\n// the https-proxy-agent module as it adds startup cost.\r\nfunction loadProxy() {\r\n    const proxy = process.env.HTTPS_PROXY ||\r\n        process.env.https_proxy ||\r\n        process.env.HTTP_PROXY ||\r\n        process.env.http_proxy;\r\n    if (proxy) {\r\n        HttpsProxyAgent = require('https-proxy-agent');\r\n    }\r\n    return proxy;\r\n}\r\nloadProxy();\r\nclass Gaxios {\r\n    /**\r\n     * The Gaxios class is responsible for making HTTP requests.\r\n     * @param defaults The default set of options to be used for this instance.\r\n     */\r\n    constructor(defaults) {\r\n        this.agentCache = new Map();\r\n        this.defaults = defaults || {};\r\n    }\r\n    /**\r\n     * Perform an HTTP request with the given options.\r\n     * @param opts Set of HTTP options that will be used for this HTTP request.\r\n     */\r\n    async request(opts = {}) {\r\n        opts = this.validateOpts(opts);\r\n        return this._request(opts);\r\n    }\r\n    async _defaultAdapter(opts) {\r\n        const res = await fetch(opts.url, opts);\r\n        const data = await this.getResponseData(opts, res);\r\n        return this.translateResponse(opts, res, data);\r\n    }\r\n    /**\r\n     * Internal, retryable version of the `request` method.\r\n     * @param opts Set of HTTP options that will be used for this HTTP request.\r\n     */\r\n    async _request(opts = {}) {\r\n        try {\r\n            let translatedResponse;\r\n            if (opts.adapter) {\r\n                translatedResponse = await opts.adapter(opts, this._defaultAdapter.bind(this));\r\n            }\r\n            else {\r\n                translatedResponse = await this._defaultAdapter(opts);\r\n            }\r\n            if (!opts.validateStatus(translatedResponse.status)) {\r\n                throw new common_1.GaxiosError(`Request failed with status code ${translatedResponse.status}`, opts, translatedResponse);\r\n            }\r\n            return translatedResponse;\r\n        }\r\n        catch (e) {\r\n            const err = e;\r\n            err.config = opts;\r\n            const { shouldRetry, config } = await retry_1.getRetryConfig(e);\r\n            if (shouldRetry && config) {\r\n                err.config.retryConfig.currentRetryAttempt = config.retryConfig.currentRetryAttempt;\r\n                return this._request(err.config);\r\n            }\r\n            throw err;\r\n        }\r\n    }\r\n    async getResponseData(opts, res) {\r\n        switch (opts.responseType) {\r\n            case 'stream':\r\n                return res.body;\r\n            case 'json': {\r\n                let data = await res.text();\r\n                try {\r\n                    data = JSON.parse(data);\r\n                }\r\n                catch (_a) {\r\n                    // continue\r\n                }\r\n                return data;\r\n            }\r\n            case 'arraybuffer':\r\n                return res.arrayBuffer();\r\n            case 'blob':\r\n                return res.blob();\r\n            default:\r\n                return res.text();\r\n        }\r\n    }\r\n    /**\r\n     * Validates the options, and merges them with defaults.\r\n     * @param opts The original options passed from the client.\r\n     */\r\n    validateOpts(options) {\r\n        const opts = extend_1.default(true, {}, this.defaults, options);\r\n        if (!opts.url) {\r\n            throw new Error('URL is required.');\r\n        }\r\n        // baseUrl has been deprecated, remove in 2.0\r\n        const baseUrl = opts.baseUrl || opts.baseURL;\r\n        if (baseUrl) {\r\n            opts.url = baseUrl + opts.url;\r\n        }\r\n        const parsedUrl = new URL(opts.url);\r\n        opts.url = `${parsedUrl.origin}${parsedUrl.pathname}`;\r\n        opts.params = extend_1.default(querystring_1.default.parse(parsedUrl.search.substr(1)), // removes leading ?\r\n        opts.params);\r\n        opts.paramsSerializer = opts.paramsSerializer || this.paramsSerializer;\r\n        if (opts.params) {\r\n            parsedUrl.search = opts.paramsSerializer(opts.params);\r\n        }\r\n        opts.url = parsedUrl.href;\r\n        if (typeof options.maxContentLength === 'number') {\r\n            opts.size = options.maxContentLength;\r\n        }\r\n        if (typeof options.maxRedirects === 'number') {\r\n            opts.follow = options.maxRedirects;\r\n        }\r\n        opts.headers = opts.headers || {};\r\n        if (opts.data) {\r\n            if (is_stream_1.default.readable(opts.data)) {\r\n                opts.body = opts.data;\r\n            }\r\n            else if (typeof opts.data === 'object') {\r\n                opts.body = JSON.stringify(opts.data);\r\n                // Allow the user to specifiy their own content type,\r\n                // such as application/json-patch+json; for historical reasons this\r\n                // content type must currently be a json type, as we are relying on\r\n                // application/x-www-form-urlencoded (which is incompatible with\r\n                // upstream GCP APIs) being rewritten to application/json.\r\n                //\r\n                // TODO: refactor upstream dependencies to stop relying on this\r\n                // side-effect.\r\n                if (!opts.headers['Content-Type'] ||\r\n                    !opts.headers['Content-Type'].includes('json')) {\r\n                    opts.headers['Content-Type'] = 'application/json';\r\n                }\r\n            }\r\n            else {\r\n                opts.body = opts.data;\r\n            }\r\n        }\r\n        opts.validateStatus = opts.validateStatus || this.validateStatus;\r\n        opts.responseType = opts.responseType || 'json';\r\n        if (!opts.headers['Accept'] && opts.responseType === 'json') {\r\n            opts.headers['Accept'] = 'application/json';\r\n        }\r\n        opts.method = opts.method || 'GET';\r\n        const proxy = loadProxy();\r\n        if (proxy) {\r\n            if (this.agentCache.has(proxy)) {\r\n                opts.agent = this.agentCache.get(proxy);\r\n            }\r\n            else {\r\n                opts.agent = new HttpsProxyAgent(proxy);\r\n                this.agentCache.set(proxy, opts.agent);\r\n            }\r\n        }\r\n        return opts;\r\n    }\r\n    /**\r\n     * By default, throw for any non-2xx status code\r\n     * @param status status code from the HTTP response\r\n     */\r\n    validateStatus(status) {\r\n        return status >= 200 && status < 300;\r\n    }\r\n    /**\r\n     * Encode a set of key/value pars into a querystring format (?foo=bar&baz=boo)\r\n     * @param params key value pars to encode\r\n     */\r\n    paramsSerializer(params) {\r\n        return querystring_1.default.stringify(params);\r\n    }\r\n    translateResponse(opts, res, data) {\r\n        // headers need to be converted from a map to an obj\r\n        const headers = {};\r\n        res.headers.forEach((value, key) => {\r\n            headers[key] = value;\r\n        });\r\n        return {\r\n            config: opts,\r\n            data: data,\r\n            headers,\r\n            status: res.status,\r\n            statusText: res.statusText,\r\n            // XMLHttpRequestLike\r\n            request: {\r\n                responseURL: res.url,\r\n            },\r\n        };\r\n    }\r\n}\r\nexports.Gaxios = Gaxios;\r\n//# sourceMappingURL=gaxios.js.map"]},"metadata":{},"sourceType":"script"}