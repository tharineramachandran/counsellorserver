{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Activants46\\\\Desktop\\\\githubLMS\\\\counsellorserver\\\\ATIVANTS_LMS_COUNSELLOR\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Activants46\\\\Desktop\\\\githubLMS\\\\counsellorserver\\\\ATIVANTS_LMS_COUNSELLOR\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\Activants46\\\\Desktop\\\\githubLMS\\\\counsellorserver\\\\ATIVANTS_LMS_COUNSELLOR\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\Activants46\\\\Desktop\\\\githubLMS\\\\counsellorserver\\\\ATIVANTS_LMS_COUNSELLOR\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\Activants46\\\\Desktop\\\\githubLMS\\\\counsellorserver\\\\ATIVANTS_LMS_COUNSELLOR\\\\src\\\\SecondaryComponents\\\\Desktop\\\\UserDashboard\\\\layout\\\\ViewMessages.js\";\nimport React from 'react';\nimport { Button, Form, Header, Image, Input, Dropdown, Grid, Modal, Message, Segment, Card, Img, Icon, Table, Label, Container, List, Popup } from \"semantic-ui-react\";\nimport { ToastContainer, toast } from 'react-toastify';\n\nvar axios = require('axios');\n\nvar ViewMessages = /*#__PURE__*/function (_React$Component) {\n  _inherits(ViewMessages, _React$Component);\n\n  var _super = _createSuper(ViewMessages);\n\n  function ViewMessages() {\n    var _this;\n\n    _classCallCheck(this, ViewMessages);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      requests: [],\n      openModel: false,\n      messages: \"\",\n      chatID: \"\",\n      receiverID: 0,\n      message: \"\",\n      receiverName: '',\n      receiverEmail: '',\n      viewNotiMessage: false,\n      totalChats: 0\n    };\n\n    _this.getData = function () {\n      axios.get('http://localhost:5000/messages/getTotalChats/' + localStorage.userID, {\n        headers: {\n          jwtToken: localStorage.jwtToken\n        },\n        data: {\n          userID: localStorage.userID\n        }\n      }).then(function (res) {\n        if (parseInt(res.data) != _this.state.totalChats) {\n          _this.setTable();\n\n          _this.setState({\n            totalChats: parseInt(res.data)\n          });\n        }\n      }).catch(function (error) {\n        console.log(error);\n      });\n    };\n\n    _this.setTable = function () {\n      axios.get('http://localhost:5000/messages/getChats/' + localStorage.userID, {\n        headers: {\n          jwtToken: localStorage.jwtToken\n        },\n        data: {\n          userID: localStorage.userID\n        }\n      }).then(function (res) {\n        var requests = res.data;\n        var openModel = false;\n\n        _this.setState({\n          requests: requests,\n          openModel: openModel\n        });\n      }).catch(function (error) {\n        console.log(error);\n      });\n    };\n\n    _this.sendMessage = function () {\n      console.log(_this.state.message);\n      var headers = {\n        jwtToken: localStorage.jwtToken\n      };\n      var data = {\n        message: _this.state.message,\n        receiverID: _this.state.receiverID,\n        chatID: _this.state.chatID,\n        userID: localStorage.userID\n      };\n      axios.post('http://localhost:5000/messages/createMessages', data, {\n        headers: headers\n      }).then(function (res) {\n        console.log(res);\n\n        _this.getNewMessages(_this.state.chatID);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    };\n\n    _this.getNewMessages = function (chatID) {\n      axios.get('http://localhost:5000/messages/getMessages/' + chatID, {\n        headers: {\n          jwtToken: localStorage.jwtToken\n        },\n        data: {\n          userID: localStorage.userID\n        }\n      }).then(function (res) {\n        _this.setState({\n          messages: res.data\n        });\n      }).catch(function (error) {\n        console.log(error);\n      });\n    };\n\n    _this.viewMessages = function (chatID, receiverID, receiverName, receiverEmail) {\n      var headers = {\n        jwtToken: localStorage.jwtToken\n      };\n      var data = {\n        chatID: chatID\n      };\n      axios.post('http://localhost:5000/messages/read/' + chatID, data, {\n        headers: headers\n      }).then(function (res) {\n        console.log(res);\n\n        _this.getNewMessages(_this.state.chatID);\n      }).catch(function (error) {\n        console.log(error);\n      });\n      console.log([chatID, receiverID]);\n      var viewNotiMessage = true;\n\n      _this.setState({\n        chatID: chatID,\n        receiverID: receiverID,\n        receiverName: receiverName,\n        receiverEmail: receiverEmail,\n        viewNotiMessage: viewNotiMessage\n      });\n\n      _this.getNewMessages(chatID);\n\n      _this.setTable();\n    };\n\n    _this.backToMessages = function () {\n      var viewNotiMessage = false;\n\n      _this.setState({\n        viewNotiMessage: viewNotiMessage\n      });\n    };\n\n    _this._onKeyUp = function (e) {\n      var value = e.target.value.toLowerCase();\n\n      _this.setState({\n        message: value\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ViewMessages, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setTable();\n      this.getData();\n      setInterval(this.getData, 5000);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/React.createElement(Grid, {\n        columns: \"equal\",\n        divided: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }\n      }, this.state.viewNotiMessage ? /*#__PURE__*/React.createElement(Grid.Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Grid.Column, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Container, {\n        style: {\n          padding: \"5px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 29\n        }\n      }, \" \", /*#__PURE__*/React.createElement(Button, {\n        onClick: this.backToMessages,\n        style: {\n          float: 'left'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 69\n        }\n      }, \"    \", /*#__PURE__*/React.createElement(Icon, {\n        color: \"black\",\n        name: \"angle left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 140\n        }\n      }), \" Back to inbox\"), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 33\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 33\n        }\n      })), /*#__PURE__*/React.createElement(Container, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Table, {\n        basic: \"very\",\n        celled: true,\n        collapsing: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Table.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Table.Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Table.Cell, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 49\n        }\n      }, \" \", this.state.receiverName), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 49\n        }\n      }, \" \", this.state.receiverEmail))), this.state.messages.length > 0 ? this.state.messages.map(function (details, index) {\n        return /*#__PURE__*/React.createElement(Table.Row, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 49\n          }\n        }, /*#__PURE__*/React.createElement(Table.Cell, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 53\n          }\n        }, details.ct_message));\n      }) : /*#__PURE__*/React.createElement(Table.Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(Table.Cell, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 53\n        }\n      }, \"No Messages found for you\")))), /*#__PURE__*/React.createElement(Segment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        type: \"Message\",\n        onChange: this._onKeyUp,\n        name: \"m\",\n        id: \"m\",\n        placeholder: \"Message\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 37\n        }\n      }), \" \", /*#__PURE__*/React.createElement(Button, {\n        onClick: function onClick() {\n          return _this2.sendMessage();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 40\n        }\n      }, \"  Send \"))))) : /*#__PURE__*/React.createElement(Grid.Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 22\n        }\n      }, /*#__PURE__*/React.createElement(Grid.Column, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Container, {\n        style: {\n          padding: '5%'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 33\n        }\n      }, \"Inbox\"), this.state.requests.length > 0 ? this.state.requests.map(function (details, index) {\n        return /*#__PURE__*/React.createElement(Card, {\n          style: {\n            width: '100%',\n            padding: '2%'\n          },\n          onClick: function onClick() {\n            return _this2.viewMessages(details.id, details.ID_USER_UUID, details.TX_USER_NAME, details.TX_USER_EMAIL);\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 41\n          }\n        }, details.ct_unread == '1' ? /*#__PURE__*/React.createElement(\"div\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 79\n          }\n        }, /*#__PURE__*/React.createElement(Icon, {\n          style: {\n            float: \"right\",\n            width: '10%'\n          },\n          color: \"blue\",\n          name: \"circle\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 45\n          }\n        }), /*#__PURE__*/React.createElement(Card.Content, {\n          style: {\n            float: \"left\",\n            width: '80%'\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 49\n          }\n        }, /*#__PURE__*/React.createElement(Card.Description, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 53\n          }\n        }, details.TX_USER_NAME), /*#__PURE__*/React.createElement(\"p\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 53\n          }\n        }, /*#__PURE__*/React.createElement(\"strong\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 56\n          }\n        }, \"Subject : \"), details.ct_subject, \" \"), /*#__PURE__*/React.createElement(\"p\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 53\n          }\n        }, /*#__PURE__*/React.createElement(\"strong\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 56\n          }\n        }, \"Catagory :   \"), details.ct_catagory, \" \"))) : /*#__PURE__*/React.createElement(\"div\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 51\n          }\n        }, /*#__PURE__*/React.createElement(Icon, {\n          style: {\n            float: \"right\",\n            width: '10%'\n          },\n          color: \"grey\",\n          name: \"circle outline\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 50\n          }\n        }), /*#__PURE__*/React.createElement(Card.Content, {\n          style: {\n            float: \"left\",\n            width: '80%'\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 49\n          }\n        }, /*#__PURE__*/React.createElement(Card.Description, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 53\n          }\n        }, details.TX_USER_NAME), /*#__PURE__*/React.createElement(\"p\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 53\n          }\n        }, /*#__PURE__*/React.createElement(\"strong\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 56\n          }\n        }, \"Subject : \"), details.ct_subject, \" \"), /*#__PURE__*/React.createElement(\"p\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 53\n          }\n        }, /*#__PURE__*/React.createElement(\"strong\", {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 56\n          }\n        }, \"Catagory :   \"), details.ct_catagory, \" \")), \" \")) //                                 <Card  style={{ width: '100%' }}  onClick={() => this.viewMessages(details.id, details.ID_USER_UUID, details.TX_USER_NAME, details.TX_USER_EMAIL)} >\n        // <Card.Content  > {details.ct_unread  == '1'? (   \n        //                                                  <Icon    floated='right' color='blue' name='circle' /> \n        //                                             )\n        //                                             :\n        //                                             ( \n        //                                                  <Icon   floated='right'  color='grey' name='circle outline' /> \n        //                                             )\n        // }\n        //                                         <Card.Description>\n        //                                             {details.TX_USER_NAME}</Card.Description>\n        //                                             <p>\n        //                                             {details.ct_subject } </p>\n        //                                             </Card.Content>\n        //                                 </Card>\n        ;\n      }) : /*#__PURE__*/React.createElement(Card, {\n        style: {\n          width: '100%'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Card.Content, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(Card.Header, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 49\n        }\n      }, \"No Messages Yet..\")))))));\n    }\n  }]);\n\n  return ViewMessages;\n}(React.Component);\n\nexport default ViewMessages;","map":{"version":3,"sources":["C:/Users/Activants46/Desktop/githubLMS/counsellorserver/ATIVANTS_LMS_COUNSELLOR/src/SecondaryComponents/Desktop/UserDashboard/layout/ViewMessages.js"],"names":["React","Button","Form","Header","Image","Input","Dropdown","Grid","Modal","Message","Segment","Card","Img","Icon","Table","Label","Container","List","Popup","ToastContainer","toast","axios","require","ViewMessages","state","requests","openModel","messages","chatID","receiverID","message","receiverName","receiverEmail","viewNotiMessage","totalChats","getData","get","localStorage","userID","headers","jwtToken","data","then","res","parseInt","setTable","setState","catch","error","console","log","sendMessage","post","getNewMessages","viewMessages","backToMessages","_onKeyUp","e","value","target","toLowerCase","setInterval","padding","float","length","map","details","index","ct_message","width","id","ID_USER_UUID","TX_USER_NAME","TX_USER_EMAIL","ct_unread","ct_subject","ct_catagory","Component"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACIC,MADJ,EACYC,IADZ,EACkBC,MADlB,EAC0BC,KAD1B,EACiCC,KADjC,EAEIC,QAFJ,EAEcC,IAFd,EAEoBC,KAFpB,EAGIC,OAHJ,EAGaC,OAHb,EAGsBC,IAHtB,EAG4BC,GAH5B,EAGiCC,IAHjC,EAIIC,KAJJ,EAIWC,KAJX,EAIkBC,SAJlB,EAI6BC,IAJ7B,EAImCC,KAJnC,QAKO,mBALP;AAMA,SAASC,cAAT,EAAyBC,KAAzB,QAAsC,gBAAtC;;AACA,IAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;IAGMC,Y;;;;;;;;;;;;;;;UACFC,K,GAAQ;AACJC,MAAAA,QAAQ,EAAE,EADN;AAEJC,MAAAA,SAAS,EAAE,KAFP;AAGJC,MAAAA,QAAQ,EAAE,EAHN;AAIJC,MAAAA,MAAM,EAAE,EAJJ;AAKJC,MAAAA,UAAU,EAAE,CALR;AAMJC,MAAAA,OAAO,EAAE,EANL;AAOJC,MAAAA,YAAY,EAAE,EAPV;AAQJC,MAAAA,aAAa,EAAE,EARX;AASJC,MAAAA,eAAe,EAAE,KATb;AAUJC,MAAAA,UAAU,EAAG;AAVT,K;;UAkBRC,O,GAAU,YAAM;AACZd,MAAAA,KAAK,CAACe,GAAN,CAAU,kDAAkDC,YAAY,CAACC,MAAzE,EAAiF;AAC7EC,QAAAA,OAAO,EAAE;AACLC,UAAAA,QAAQ,EAAEH,YAAY,CAACG;AADlB,SADoE;AAI7EC,QAAAA,IAAI,EAAE;AACFH,UAAAA,MAAM,EAAED,YAAY,CAACC;AADnB;AAJuE,OAAjF,EAQKI,IARL,CAQU,UAACC,GAAD,EAAS;AAEX,YAAIC,QAAQ,CAACD,GAAG,CAACF,IAAL,CAAR,IAAuB,MAAKjB,KAAL,CAAWU,UAAtC,EAAkD;AAC9C,gBAAKW,QAAL;;AACA,gBAAKC,QAAL,CAAc;AAACZ,YAAAA,UAAU,EAAEU,QAAQ,CAACD,GAAG,CAACF,IAAL;AAArB,WAAd;AAEH;AAEJ,OAhBL,EAiBKM,KAjBL,CAiBW,UAAUC,KAAV,EAAiB;AACpBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,OAnBL;AAqBH,K;;UACDH,Q,GAAW,YAAM;AACbxB,MAAAA,KAAK,CAACe,GAAN,CAAU,6CAA6CC,YAAY,CAACC,MAApE,EAA4E;AACxEC,QAAAA,OAAO,EAAE;AACLC,UAAAA,QAAQ,EAAEH,YAAY,CAACG;AADlB,SAD+D;AAIxEC,QAAAA,IAAI,EAAE;AACFH,UAAAA,MAAM,EAAED,YAAY,CAACC;AADnB;AAJkE,OAA5E,EAQKI,IARL,CAQU,UAACC,GAAD,EAAS;AACX,YAAMlB,QAAQ,GAAGkB,GAAG,CAACF,IAArB;AACA,YAAMf,SAAS,GAAG,KAAlB;;AACA,cAAKoB,QAAL,CAAc;AAAErB,UAAAA,QAAQ,EAARA,QAAF;AAAYC,UAAAA,SAAS,EAATA;AAAZ,SAAd;AACH,OAZL,EAaKqB,KAbL,CAaW,UAAUC,KAAV,EAAiB;AACpBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,OAfL;AAgBH,K;;UAEDG,W,GAAc,YAAM;AAChBF,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAK1B,KAAL,CAAWM,OAAvB;AAEA,UAAMS,OAAO,GAAG;AACZC,QAAAA,QAAQ,EAAEH,YAAY,CAACG;AADX,OAAhB;AAGA,UAAMC,IAAI,GAAG;AACTX,QAAAA,OAAO,EAAE,MAAKN,KAAL,CAAWM,OADX;AAETD,QAAAA,UAAU,EAAE,MAAKL,KAAL,CAAWK,UAFd;AAGTD,QAAAA,MAAM,EAAE,MAAKJ,KAAL,CAAWI,MAHV;AAITU,QAAAA,MAAM,EAAED,YAAY,CAACC;AAJZ,OAAb;AAMAjB,MAAAA,KAAK,CAAC+B,IAAN,CAAW,+CAAX,EAA4DX,IAA5D,EAAkE;AAC9DF,QAAAA,OAAO,EAAEA;AADqD,OAAlE,EAGKG,IAHL,CAGU,UAACC,GAAD,EAAS;AACXM,QAAAA,OAAO,CAACC,GAAR,CAAYP,GAAZ;;AACA,cAAKU,cAAL,CAAoB,MAAK7B,KAAL,CAAWI,MAA/B;AACH,OANL,EAOKmB,KAPL,CAOW,UAAUC,KAAV,EAAiB;AACpBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,OATL;AAUH,K;;UAEDK,c,GAAiB,UAACzB,MAAD,EAAY;AACzBP,MAAAA,KAAK,CAACe,GAAN,CAAU,gDAAgDR,MAA1D,EAAkE;AAC9DW,QAAAA,OAAO,EAAE;AACLC,UAAAA,QAAQ,EAAEH,YAAY,CAACG;AADlB,SADqD;AAI9DC,QAAAA,IAAI,EAAE;AACFH,UAAAA,MAAM,EAAED,YAAY,CAACC;AADnB;AAJwD,OAAlE,EAQKI,IARL,CAQU,UAACC,GAAD,EAAS;AACX,cAAKG,QAAL,CAAc;AAAEnB,UAAAA,QAAQ,EAAEgB,GAAG,CAACF;AAAhB,SAAd;AACH,OAVL,EAWKM,KAXL,CAWW,UAAUC,KAAV,EAAiB;AACpBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,OAbL;AAcH,K;;UAGDM,Y,GAAe,UAAC1B,MAAD,EAASC,UAAT,EAAqBE,YAArB,EAAmCC,aAAnC,EAAqD;AAChE,UAAMO,OAAO,GAAG;AACZC,QAAAA,QAAQ,EAAEH,YAAY,CAACG;AADX,OAAhB;AAGA,UAAMC,IAAI,GAAG;AAETb,QAAAA,MAAM,EAAEA;AAFC,OAAb;AAMAP,MAAAA,KAAK,CAAC+B,IAAN,CAAW,yCAAuCxB,MAAlD,EAA0Da,IAA1D,EAAgE;AAC5DF,QAAAA,OAAO,EAAEA;AADmD,OAAhE,EAGKG,IAHL,CAGU,UAACC,GAAD,EAAS;AACXM,QAAAA,OAAO,CAACC,GAAR,CAAYP,GAAZ;;AACA,cAAKU,cAAL,CAAoB,MAAK7B,KAAL,CAAWI,MAA/B;AACH,OANL,EAOKmB,KAPL,CAOW,UAAUC,KAAV,EAAiB;AACpBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,OATL;AAaAC,MAAAA,OAAO,CAACC,GAAR,CAAY,CAACtB,MAAD,EAASC,UAAT,CAAZ;AACA,UAAII,eAAe,GAAG,IAAtB;;AAEA,YAAKa,QAAL,CAAc;AAAElB,QAAAA,MAAM,EAANA,MAAF;AAAUC,QAAAA,UAAU,EAAVA,UAAV;AAAsBE,QAAAA,YAAY,EAAZA,YAAtB;AAAoCC,QAAAA,aAAa,EAAbA,aAApC;AAAmDC,QAAAA,eAAe,EAAfA;AAAnD,OAAd;;AACA,YAAKoB,cAAL,CAAoBzB,MAApB;;AACA,YAAKiB,QAAL;AACH,K;;UACDU,c,GAAiB,YAAM;AAEnB,UAAItB,eAAe,GAAG,KAAtB;;AACA,YAAKa,QAAL,CAAc;AAAEb,QAAAA,eAAe,EAAfA;AAAF,OAAd;AAEH,K;;UAEDuB,Q,GAAW,UAAAC,CAAC,EAAI;AACZ,UAAIC,KAAK,GAAGD,CAAC,CAACE,MAAF,CAASD,KAAT,CAAeE,WAAf,EAAZ;;AACA,YAAKd,QAAL,CAAc;AAAEhB,QAAAA,OAAO,EAAE4B;AAAX,OAAd;AACH,K;;;;;;;wCAjImB;AAChB,WAAKb,QAAL;AACA,WAAKV,OAAL;AACA0B,MAAAA,WAAW,CAAC,KAAK1B,OAAN,EAAe,IAAf,CAAX;AACH;;;6BA8HQ;AAAA;;AACL,0BACI,oBAAC,IAAD;AAAM,QAAA,OAAO,EAAC,OAAd;AAAsB,QAAA,OAAO,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIK,KAAKX,KAAL,CAAWS,eAAX,gBAEG,oBAAC,IAAD,CAAM,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,IAAD,CAAM,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAE,SAAF;AAAY,QAAA,KAAK,EAAE;AAAE6B,UAAAA,OAAO,EAAE;AAAX,SAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAwC,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,KAAKP,cAAtB;AAAsC,QAAA,KAAK,EAAE;AAAEQ,UAAAA,KAAK,EAAE;AAAT,SAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAuE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAC,OAAZ;AAAoB,QAAA,IAAI,EAAC,YAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAvE,mBAAxC,eACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CADJ,eAKI,oBAAE,SAAF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAC,MAAb;AAAoB,QAAA,MAAM,MAA1B;AAA2B,QAAA,UAAU,MAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,KAAD,CAAO,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAU,KAAKvC,KAAL,CAAWO,YAArB,CADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAK,KAAKP,KAAL,CAAWQ,aAAhB,CAFJ,CADJ,CADJ,EAOK,KAAKR,KAAL,CAAWG,QAAX,CAAoBqC,MAApB,GAA6B,CAA7B,GACG,KAAKxC,KAAL,CAAWG,QAAX,CAAoBsC,GAApB,CAAwB,UAACC,OAAD,EAAUC,KAAV;AAAA,4BACpB,oBAAC,KAAD,CAAO,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAOI,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACKD,OAAO,CAACE,UADb,CAPJ,CADoB;AAAA,OAAxB,CADH,gBAeO,oBAAC,KAAD,CAAO,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCADJ,CAtBZ,CADJ,CADJ,eAiCI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,KAAD;AACI,QAAA,IAAI,EAAC,SADT;AAEI,QAAA,QAAQ,EAAE,KAAKZ,QAFnB;AAGI,QAAA,IAAI,EAAC,GAHT;AAII,QAAA,EAAE,EAAC,GAJP;AAKI,QAAA,WAAW,EAAC,SALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,oBAOO,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACL,WAAL,EAAN;AAAA,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAPP,CAjCJ,CALJ,CADJ,CAFH,gBAyDI,oBAAE,IAAF,CAAO,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACG,oBAAC,IAAD,CAAM,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,SAAD;AAAW,QAAA,KAAK,EAAE;AAAEW,UAAAA,OAAO,EAAE;AAAX,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ,EAEK,KAAKtC,KAAL,CAAWC,QAAX,CAAoBuC,MAApB,GAA6B,CAA7B,GACG,KAAKxC,KAAL,CAAWC,QAAX,CAAoBwC,GAApB,CAAwB,UAACC,OAAD,EAAUC,KAAV;AAAA,4BACpB,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAE;AAAEE,YAAAA,KAAK,EAAE,MAAT;AAAgBP,YAAAA,OAAO,EAAC;AAAxB,WAAb;AAA6C,UAAA,OAAO,EAAE;AAAA,mBAAM,MAAI,CAACR,YAAL,CAAkBY,OAAO,CAACI,EAA1B,EAA8BJ,OAAO,CAACK,YAAtC,EAAoDL,OAAO,CAACM,YAA5D,EAA0EN,OAAO,CAACO,aAAlF,CAAN;AAAA,WAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACKP,OAAO,CAACQ,SAAR,IAAqB,GAArB,gBAAiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAClC,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAE;AAAEX,YAAAA,KAAK,EAAE,OAAT;AAAkBM,YAAAA,KAAK,EAAE;AAAzB,WAAb;AAA+C,UAAA,KAAK,EAAC,MAArD;AAA4D,UAAA,IAAI,EAAC,QAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADkC,eAE9B,oBAAC,IAAD,CAAM,OAAN;AAAc,UAAA,KAAK,EAAE;AAAEN,YAAAA,KAAK,EAAE,MAAT;AAAiBM,YAAAA,KAAK,EAAE;AAAxB,WAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAEI,oBAAC,IAAD,CAAM,WAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACCH,OAAO,CAACM,YADT,CAFJ,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAH,EAA+BN,OAAO,CAACS,UAAvC,MALJ,eAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAH,EAAkCT,OAAO,CAACU,WAA1C,MANJ,CAF8B,CAAjC,gBAeK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACD,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAE;AAAEb,YAAAA,KAAK,EAAE,OAAT;AAAkBM,YAAAA,KAAK,EAAE;AAAzB,WAAb;AAA+C,UAAA,KAAK,EAAC,MAArD;AAA4D,UAAA,IAAI,EAAC,gBAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADC,eAEF,oBAAC,IAAD,CAAM,OAAN;AAAc,UAAA,KAAK,EAAE;AAAEN,YAAAA,KAAK,EAAE,MAAT;AAAiBM,YAAAA,KAAK,EAAE;AAAxB,WAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI,oBAAC,IAAD,CAAM,WAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACCH,OAAO,CAACM,YADT,CADJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAH,EAA+BN,OAAO,CAACS,UAAvC,MAJJ,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAH,EAAkCT,OAAO,CAACU,WAA1C,MALJ,CAFE,MAhBV,CADoB,CAuCpB;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AA1DoB;AAAA,OAAxB,CADH,gBA+DO,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAEP,UAAAA,KAAK,EAAE;AAAT,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,IAAD,CAAM,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,IAAD,CAAM,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADJ,CADJ,CAjEZ,CADJ,CADH,CA7DT,CADJ;AAqJH;;;;EAtSsBrE,KAAK,CAAC6E,S;;AAySjC,eAAetD,YAAf","sourcesContent":["import React from 'react';\r\nimport {\r\n    Button, Form, Header, Image, Input,\r\n    Dropdown, Grid, Modal,\r\n    Message, Segment, Card, Img, Icon,\r\n    Table, Label, Container, List, Popup\r\n} from \"semantic-ui-react\";\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nconst axios = require('axios');\r\n\r\n\r\nclass ViewMessages extends React.Component {\r\n    state = {\r\n        requests: [],\r\n        openModel: false,\r\n        messages: \"\",\r\n        chatID: \"\",\r\n        receiverID: 0,\r\n        message: \"\",\r\n        receiverName: '',\r\n        receiverEmail: '',\r\n        viewNotiMessage: false,\r\n        totalChats : 0\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setTable();\r\n        this.getData();\r\n        setInterval(this.getData, 5000);  \r\n    }\r\n    getData = () => {\r\n        axios.get('http://localhost:5000/messages/getTotalChats/' + localStorage.userID, {\r\n            headers: {\r\n                jwtToken: localStorage.jwtToken\r\n            },\r\n            data: {\r\n                userID: localStorage.userID\r\n            }\r\n        })\r\n            .then((res) => {\r\n            \r\n                if (parseInt(res.data)  != this.state.totalChats) {\r\n                    this.setTable();\r\n                    this.setState({totalChats :parseInt(res.data)   })\r\n\r\n                }\r\n\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n\r\n    }\r\n    setTable = () => {\r\n        axios.get('http://localhost:5000/messages/getChats/' + localStorage.userID, {\r\n            headers: {\r\n                jwtToken: localStorage.jwtToken\r\n            },\r\n            data: {\r\n                userID: localStorage.userID\r\n            }\r\n        })\r\n            .then((res) => {\r\n                const requests = res.data;\r\n                const openModel = false;\r\n                this.setState({ requests, openModel });\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    sendMessage = () => {\r\n        console.log(this.state.message);\r\n\r\n        const headers = {\r\n            jwtToken: localStorage.jwtToken\r\n        }\r\n        const data = {\r\n            message: this.state.message,\r\n            receiverID: this.state.receiverID,\r\n            chatID: this.state.chatID,\r\n            userID: localStorage.userID\r\n        }\r\n        axios.post('http://localhost:5000/messages/createMessages', data, {\r\n            headers: headers\r\n        })\r\n            .then((res) => {\r\n                console.log(res);\r\n                this.getNewMessages(this.state.chatID);\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    getNewMessages = (chatID) => {\r\n        axios.get('http://localhost:5000/messages/getMessages/' + chatID, {\r\n            headers: {\r\n                jwtToken: localStorage.jwtToken\r\n            },\r\n            data: {\r\n                userID: localStorage.userID\r\n            }\r\n        })\r\n            .then((res) => {\r\n                this.setState({ messages: res.data })\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n\r\n    viewMessages = (chatID, receiverID, receiverName, receiverEmail) => {\r\n        const headers = {\r\n            jwtToken: localStorage.jwtToken\r\n        }\r\n        const data = {\r\n            \r\n            chatID: chatID\r\n          \r\n        }\r\n\r\n        axios.post('http://localhost:5000/messages/read/'+chatID, data, {\r\n            headers: headers\r\n        })\r\n            .then((res) => {\r\n                console.log(res);\r\n                this.getNewMessages(this.state.chatID);\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n\r\n\r\n\r\n        console.log([chatID, receiverID]);\r\n        var viewNotiMessage = true;\r\n        \r\n        this.setState({ chatID, receiverID, receiverName, receiverEmail, viewNotiMessage });\r\n        this.getNewMessages(chatID);\r\n        this.setTable ();\r\n    };\r\n    backToMessages = () => {\r\n\r\n        var viewNotiMessage = false;\r\n        this.setState({ viewNotiMessage });\r\n\r\n    };\r\n\r\n    _onKeyUp = e => {\r\n        var value = e.target.value.toLowerCase();\r\n        this.setState({ message: value });\r\n    };\r\n    render() {\r\n        return (\r\n            <Grid columns='equal' divided>\r\n\r\n\r\n\r\n                {this.state.viewNotiMessage ? (\r\n\r\n                    <Grid.Row>\r\n                        <Grid.Column >\r\n                            < Container style={{ padding: \"5px\" }}> <Button onClick={this.backToMessages} style={{ float: 'left' }}   >    <Icon color='black' name='angle left' /> Back to inbox</Button>\r\n                                <br />\r\n                                <br />\r\n                            </Container>\r\n                            < Container  >\r\n                                <Table basic='very' celled collapsing>\r\n                                    <Table.Body>\r\n                                        <Table.Row>\r\n                                            <Table.Cell>\r\n                                                <strong> {this.state.receiverName}</strong>\r\n                                                <p> {this.state.receiverEmail}</p>\r\n                                            </Table.Cell>\r\n                                        </Table.Row>\r\n                                        {this.state.messages.length > 0 ? (\r\n                                            this.state.messages.map((details, index) => (\r\n                                                <Table.Row>\r\n                                                    {/* <Table.Cell>\r\n                                                    {details.ct_sender}\r\n                                                </Table.Cell>\r\n                                                <Table.Cell>\r\n                                                    {details.ct_receiver}\r\n                                                </Table.Cell> */}\r\n                                                    <Table.Cell>\r\n                                                        {details.ct_message}\r\n                                                    </Table.Cell>\r\n                                                </Table.Row>))\r\n                                        ) :\r\n                                            (\r\n                                                <Table.Row>\r\n                                                    <Table.Cell>\r\n                                                        No Messages found for you\r\n                                        </Table.Cell>\r\n                                                </Table.Row>\r\n                                            )\r\n                                        }\r\n                                    </Table.Body>\r\n                                </Table>\r\n                                <Segment>\r\n                                    <Input\r\n                                        type=\"Message\"\r\n                                        onChange={this._onKeyUp}\r\n                                        name=\"m\"\r\n                                        id=\"m\"\r\n                                        placeholder=\"Message\"\r\n                                    /> <Button onClick={() => this.sendMessage()}>  Send </Button>\r\n                                </Segment>\r\n                            </Container>\r\n                        </Grid.Column>\r\n\r\n                    </Grid.Row>\r\n\r\n                )\r\n                    :\r\n                    (< Grid.Row >\r\n                        <Grid.Column>\r\n                            <Container style={{ padding: '5%' }}>\r\n                                <h1>Inbox</h1>\r\n                                {this.state.requests.length > 0 ? (\r\n                                    this.state.requests.map((details, index) => (\r\n                                        <Card style={{ width: '100%',padding:'2%' }} onClick={() => this.viewMessages(details.id, details.ID_USER_UUID, details.TX_USER_NAME, details.TX_USER_EMAIL)} >\r\n                                            {details.ct_unread == '1' ? (     < div>\r\n                                            <Icon style={{ float: \"right\", width: '10%' }} color='blue' name='circle' />\r\n                                                <Card.Content style={{ float: \"left\", width: '80%' }}  >     \r\n                                                \r\n                                                    <Card.Description>\r\n                                                    {details.TX_USER_NAME}\r\n                                                    </Card.Description>\r\n                                                    <p><strong>Subject : </strong>{details.ct_subject} </p>\r\n                                                    <p><strong>Catagory :   </strong>{details.ct_catagory} </p>\r\n                                                     \r\n                                                </Card.Content  >\r\n                                                </div>\r\n                                                \r\n                                                )\r\n                                                :\r\n                                                ( < div>\r\n                                                 <Icon style={{ float: \"right\", width: '10%' }} color='grey' name='circle outline' />    \r\n                                                <Card.Content style={{ float: \"left\", width: '80%' }}  >                                                          \r\n                                                    <Card.Description>\r\n                                                    {details.TX_USER_NAME}\r\n                                                    </Card.Description>\r\n                                                    <p><strong>Subject : </strong>{details.ct_subject} </p>\r\n                                                    <p><strong>Catagory :   </strong>{details.ct_catagory} </p>\r\n                                                     \r\n                                                </Card.Content> </div>\r\n                                                \r\n                                                )\r\n                                            }\r\n\r\n\r\n\r\n                                        </Card>\r\n\r\n\r\n\r\n\r\n\r\n                                        //                                 <Card  style={{ width: '100%' }}  onClick={() => this.viewMessages(details.id, details.ID_USER_UUID, details.TX_USER_NAME, details.TX_USER_EMAIL)} >\r\n\r\n                                        // <Card.Content  > {details.ct_unread  == '1'? (   \r\n\r\n                                        //                                                  <Icon    floated='right' color='blue' name='circle' /> \r\n\r\n                                        //                                             )\r\n                                        //                                             :\r\n                                        //                                             ( \r\n                                        //                                                  <Icon   floated='right'  color='grey' name='circle outline' /> \r\n                                        //                                             )\r\n                                        // }\r\n                                        //                                         <Card.Description>\r\n                                        //                                             {details.TX_USER_NAME}</Card.Description>\r\n                                        //                                             <p>\r\n                                        //                                             {details.ct_subject } </p>\r\n                                        //                                             </Card.Content>\r\n\r\n\r\n                                        //                                 </Card>\r\n                                    ))\r\n                                ) :\r\n                                    (\r\n                                        <Card style={{ width: '100%' }} >\r\n                                            <Card.Content>\r\n                                                <Card.Header>\r\n                                                    No Messages Yet..</Card.Header>\r\n                                            </Card.Content>\r\n                                        </Card>\r\n                                    )\r\n                                }\r\n                            </Container>\r\n                        </Grid.Column>\r\n                    </Grid.Row >\r\n                    )\r\n\r\n                }\r\n\r\n\r\n\r\n\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ViewMessages;"]},"metadata":{},"sourceType":"module"}