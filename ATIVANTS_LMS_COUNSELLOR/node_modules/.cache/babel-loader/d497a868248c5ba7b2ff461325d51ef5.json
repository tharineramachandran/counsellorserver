{"ast":null,"code":"\"use strict\"; // Copyright 2013 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\ACTIVANTS\\\\Desktop\\\\LMS Councellor\\\\Activants_LMS_Counsellor\\\\ATIVANTS_LMS_COUNSELLOR\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\ACTIVANTS\\\\Desktop\\\\LMS Councellor\\\\Activants_LMS_Counsellor\\\\ATIVANTS_LMS_COUNSELLOR\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\ACTIVANTS\\\\Desktop\\\\LMS Councellor\\\\Activants_LMS_Counsellor\\\\ATIVANTS_LMS_COUNSELLOR\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\ACTIVANTS\\\\Desktop\\\\LMS Councellor\\\\Activants_LMS_Counsellor\\\\ATIVANTS_LMS_COUNSELLOR\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _get = require(\"C:\\\\Users\\\\ACTIVANTS\\\\Desktop\\\\LMS Councellor\\\\Activants_LMS_Counsellor\\\\ATIVANTS_LMS_COUNSELLOR\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\ACTIVANTS\\\\Desktop\\\\LMS Councellor\\\\Activants_LMS_Counsellor\\\\ATIVANTS_LMS_COUNSELLOR\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\ACTIVANTS\\\\Desktop\\\\LMS Councellor\\\\Activants_LMS_Counsellor\\\\ATIVANTS_LMS_COUNSELLOR\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:\\\\Users\\\\ACTIVANTS\\\\Desktop\\\\LMS Councellor\\\\Activants_LMS_Counsellor\\\\ATIVANTS_LMS_COUNSELLOR\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JWT = void 0;\n\nvar gtoken_1 = require(\"gtoken\");\n\nvar jwtaccess_1 = require(\"./jwtaccess\");\n\nvar oauth2client_1 = require(\"./oauth2client\");\n\nvar JWT = /*#__PURE__*/function (_oauth2client_1$OAuth) {\n  _inherits(JWT, _oauth2client_1$OAuth);\n\n  var _super = _createSuper(JWT);\n\n  function JWT(optionsOrEmail, keyFile, key, scopes, subject, keyId) {\n    var _this;\n\n    _classCallCheck(this, JWT);\n\n    var opts = optionsOrEmail && typeof optionsOrEmail === 'object' ? optionsOrEmail : {\n      email: optionsOrEmail,\n      keyFile: keyFile,\n      key: key,\n      keyId: keyId,\n      scopes: scopes,\n      subject: subject\n    };\n    _this = _super.call(this, {\n      eagerRefreshThresholdMillis: opts.eagerRefreshThresholdMillis,\n      forceRefreshOnFailure: opts.forceRefreshOnFailure\n    });\n    _this.email = opts.email;\n    _this.keyFile = opts.keyFile;\n    _this.key = opts.key;\n    _this.keyId = opts.keyId;\n    _this.scopes = opts.scopes;\n    _this.subject = opts.subject;\n    _this.additionalClaims = opts.additionalClaims;\n    _this.credentials = {\n      refresh_token: 'jwt-placeholder',\n      expiry_date: 1\n    };\n    return _this;\n  }\n  /**\n   * Creates a copy of the credential with the specified scopes.\n   * @param scopes List of requested scopes or a single scope.\n   * @return The cloned instance.\n   */\n\n\n  _createClass(JWT, [{\n    key: \"createScoped\",\n    value: function createScoped(scopes) {\n      return new JWT({\n        email: this.email,\n        keyFile: this.keyFile,\n        key: this.key,\n        keyId: this.keyId,\n        scopes: scopes,\n        subject: this.subject,\n        additionalClaims: this.additionalClaims\n      });\n    }\n    /**\n     * Obtains the metadata to be sent with the request.\n     *\n     * @param url the URI being authorized.\n     */\n\n  }, {\n    key: \"getRequestMetadataAsync\",\n    value: function () {\n      var _getRequestMetadataAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url) {\n        var _yield$this$refreshTo, tokens, headers;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(!this.apiKey && !this.hasScopes() && url)) {\n                  _context.next = 16;\n                  break;\n                }\n\n                if (!(this.additionalClaims && this.additionalClaims.target_audience)) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 4;\n                return this.refreshToken();\n\n              case 4:\n                _yield$this$refreshTo = _context.sent;\n                tokens = _yield$this$refreshTo.tokens;\n                return _context.abrupt(\"return\", {\n                  headers: this.addSharedMetadataHeaders({\n                    Authorization: \"Bearer \".concat(tokens.id_token)\n                  })\n                });\n\n              case 9:\n                // no scopes have been set, but a uri has been provided. Use JWTAccess\n                // credentials.\n                if (!this.access) {\n                  this.access = new jwtaccess_1.JWTAccess(this.email, this.key, this.keyId);\n                }\n\n                _context.next = 12;\n                return this.access.getRequestHeaders(url, this.additionalClaims);\n\n              case 12:\n                headers = _context.sent;\n                return _context.abrupt(\"return\", {\n                  headers: this.addSharedMetadataHeaders(headers)\n                });\n\n              case 14:\n                _context.next = 17;\n                break;\n\n              case 16:\n                return _context.abrupt(\"return\", _get(_getPrototypeOf(JWT.prototype), \"getRequestMetadataAsync\", this).call(this, url));\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getRequestMetadataAsync(_x) {\n        return _getRequestMetadataAsync.apply(this, arguments);\n      }\n\n      return getRequestMetadataAsync;\n    }()\n    /**\n     * Fetches an ID token.\n     * @param targetAudience the audience for the fetched ID token.\n     */\n\n  }, {\n    key: \"fetchIdToken\",\n    value: function () {\n      var _fetchIdToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(targetAudience) {\n        var gtoken;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // Create a new gToken for fetching an ID token\n                gtoken = new gtoken_1.GoogleToken({\n                  iss: this.email,\n                  sub: this.subject,\n                  scope: this.scopes,\n                  keyFile: this.keyFile,\n                  key: this.key,\n                  additionalClaims: {\n                    target_audience: targetAudience\n                  }\n                });\n                _context2.next = 3;\n                return gtoken.getToken({\n                  forceRefresh: true\n                });\n\n              case 3:\n                if (gtoken.idToken) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                throw new Error('Unknown error: Failed to fetch ID token');\n\n              case 5:\n                return _context2.abrupt(\"return\", gtoken.idToken);\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function fetchIdToken(_x2) {\n        return _fetchIdToken.apply(this, arguments);\n      }\n\n      return fetchIdToken;\n    }()\n    /**\n     * Determine if there are currently scopes available.\n     */\n\n  }, {\n    key: \"hasScopes\",\n    value: function hasScopes() {\n      if (!this.scopes) {\n        return false;\n      } // For arrays, check the array length.\n\n\n      if (this.scopes instanceof Array) {\n        return this.scopes.length > 0;\n      } // For others, convert to a string and check the length.\n\n\n      return String(this.scopes).length > 0;\n    }\n  }, {\n    key: \"authorize\",\n    value: function authorize(callback) {\n      if (callback) {\n        this.authorizeAsync().then(function (r) {\n          return callback(null, r);\n        }, callback);\n      } else {\n        return this.authorizeAsync();\n      }\n    }\n  }, {\n    key: \"authorizeAsync\",\n    value: function () {\n      var _authorizeAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.refreshToken();\n\n              case 2:\n                result = _context3.sent;\n\n                if (result) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                throw new Error('No result returned');\n\n              case 5:\n                this.credentials = result.tokens;\n                this.credentials.refresh_token = 'jwt-placeholder';\n                this.key = this.gtoken.key;\n                this.email = this.gtoken.iss;\n                return _context3.abrupt(\"return\", result.tokens);\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function authorizeAsync() {\n        return _authorizeAsync.apply(this, arguments);\n      }\n\n      return authorizeAsync;\n    }()\n    /**\n     * Refreshes the access token.\n     * @param refreshToken ignored\n     * @private\n     */\n\n  }, {\n    key: \"refreshTokenNoCache\",\n    value: function () {\n      var _refreshTokenNoCache = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4( // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      refreshToken) {\n        var gtoken, token, tokens;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                gtoken = this.createGToken();\n                _context4.next = 3;\n                return gtoken.getToken({\n                  forceRefresh: this.isTokenExpiring()\n                });\n\n              case 3:\n                token = _context4.sent;\n                tokens = {\n                  access_token: token.access_token,\n                  token_type: 'Bearer',\n                  expiry_date: gtoken.expiresAt,\n                  id_token: gtoken.idToken\n                };\n                this.emit('tokens', tokens);\n                return _context4.abrupt(\"return\", {\n                  res: null,\n                  tokens: tokens\n                });\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function refreshTokenNoCache(_x3) {\n        return _refreshTokenNoCache.apply(this, arguments);\n      }\n\n      return refreshTokenNoCache;\n    }()\n    /**\n     * Create a gToken if it doesn't already exist.\n     */\n\n  }, {\n    key: \"createGToken\",\n    value: function createGToken() {\n      if (!this.gtoken) {\n        this.gtoken = new gtoken_1.GoogleToken({\n          iss: this.email,\n          sub: this.subject,\n          scope: this.scopes,\n          keyFile: this.keyFile,\n          key: this.key,\n          additionalClaims: this.additionalClaims\n        });\n      }\n\n      return this.gtoken;\n    }\n    /**\n     * Create a JWT credentials instance using the given input options.\n     * @param json The input object.\n     */\n\n  }, {\n    key: \"fromJSON\",\n    value: function fromJSON(json) {\n      if (!json) {\n        throw new Error('Must pass in a JSON object containing the service account auth settings.');\n      }\n\n      if (!json.client_email) {\n        throw new Error('The incoming JSON object does not contain a client_email field');\n      }\n\n      if (!json.private_key) {\n        throw new Error('The incoming JSON object does not contain a private_key field');\n      } // Extract the relevant information from the json key file.\n\n\n      this.email = json.client_email;\n      this.key = json.private_key;\n      this.keyId = json.private_key_id;\n      this.projectId = json.project_id;\n      this.quotaProjectId = json.quota_project_id;\n    }\n  }, {\n    key: \"fromStream\",\n    value: function fromStream(inputStream, callback) {\n      if (callback) {\n        this.fromStreamAsync(inputStream).then(function () {\n          return callback();\n        }, callback);\n      } else {\n        return this.fromStreamAsync(inputStream);\n      }\n    }\n  }, {\n    key: \"fromStreamAsync\",\n    value: function fromStreamAsync(inputStream) {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!inputStream) {\n          throw new Error('Must pass in a stream containing the service account auth settings.');\n        }\n\n        var s = '';\n        inputStream.setEncoding('utf8').on('error', reject).on('data', function (chunk) {\n          return s += chunk;\n        }).on('end', function () {\n          try {\n            var data = JSON.parse(s);\n\n            _this2.fromJSON(data);\n\n            resolve();\n          } catch (e) {\n            reject(e);\n          }\n        });\n      });\n    }\n    /**\n     * Creates a JWT credentials instance using an API Key for authentication.\n     * @param apiKey The API Key in string form.\n     */\n\n  }, {\n    key: \"fromAPIKey\",\n    value: function fromAPIKey(apiKey) {\n      if (typeof apiKey !== 'string') {\n        throw new Error('Must provide an API Key string.');\n      }\n\n      this.apiKey = apiKey;\n    }\n    /**\n     * Using the key or keyFile on the JWT client, obtain an object that contains\n     * the key and the client email.\n     */\n\n  }, {\n    key: \"getCredentials\",\n    value: function () {\n      var _getCredentials = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var gtoken, creds;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (!this.key) {\n                  _context5.next = 4;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", {\n                  private_key: this.key,\n                  client_email: this.email\n                });\n\n              case 4:\n                if (!this.keyFile) {\n                  _context5.next = 10;\n                  break;\n                }\n\n                gtoken = this.createGToken();\n                _context5.next = 8;\n                return gtoken.getCredentials(this.keyFile);\n\n              case 8:\n                creds = _context5.sent;\n                return _context5.abrupt(\"return\", {\n                  private_key: creds.privateKey,\n                  client_email: creds.clientEmail\n                });\n\n              case 10:\n                throw new Error('A key or a keyFile must be provided to getCredentials.');\n\n              case 11:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getCredentials() {\n        return _getCredentials.apply(this, arguments);\n      }\n\n      return getCredentials;\n    }()\n  }]);\n\n  return JWT;\n}(oauth2client_1.OAuth2Client);\n\nexports.JWT = JWT;","map":{"version":3,"sources":["C:/Users/ACTIVANTS/Desktop/LMS Councellor/Activants_LMS_Counsellor/ATIVANTS_LMS_COUNSELLOR/node_modules/google-auth-library/build/src/auth/jwtclient.js"],"names":["Object","defineProperty","exports","value","JWT","gtoken_1","require","jwtaccess_1","oauth2client_1","optionsOrEmail","keyFile","key","scopes","subject","keyId","opts","email","eagerRefreshThresholdMillis","forceRefreshOnFailure","additionalClaims","credentials","refresh_token","expiry_date","url","apiKey","hasScopes","target_audience","refreshToken","tokens","headers","addSharedMetadataHeaders","Authorization","id_token","access","JWTAccess","getRequestHeaders","targetAudience","gtoken","GoogleToken","iss","sub","scope","getToken","forceRefresh","idToken","Error","Array","length","String","callback","authorizeAsync","then","r","result","createGToken","isTokenExpiring","token","access_token","token_type","expiresAt","emit","res","json","client_email","private_key","private_key_id","projectId","project_id","quotaProjectId","quota_project_id","inputStream","fromStreamAsync","Promise","resolve","reject","s","setEncoding","on","chunk","data","JSON","parse","fromJSON","e","getCredentials","creds","privateKey","clientEmail","OAuth2Client"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2013 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JWT = void 0;\nconst gtoken_1 = require(\"gtoken\");\nconst jwtaccess_1 = require(\"./jwtaccess\");\nconst oauth2client_1 = require(\"./oauth2client\");\nclass JWT extends oauth2client_1.OAuth2Client {\n    constructor(optionsOrEmail, keyFile, key, scopes, subject, keyId) {\n        const opts = optionsOrEmail && typeof optionsOrEmail === 'object'\n            ? optionsOrEmail\n            : { email: optionsOrEmail, keyFile, key, keyId, scopes, subject };\n        super({\n            eagerRefreshThresholdMillis: opts.eagerRefreshThresholdMillis,\n            forceRefreshOnFailure: opts.forceRefreshOnFailure,\n        });\n        this.email = opts.email;\n        this.keyFile = opts.keyFile;\n        this.key = opts.key;\n        this.keyId = opts.keyId;\n        this.scopes = opts.scopes;\n        this.subject = opts.subject;\n        this.additionalClaims = opts.additionalClaims;\n        this.credentials = { refresh_token: 'jwt-placeholder', expiry_date: 1 };\n    }\n    /**\n     * Creates a copy of the credential with the specified scopes.\n     * @param scopes List of requested scopes or a single scope.\n     * @return The cloned instance.\n     */\n    createScoped(scopes) {\n        return new JWT({\n            email: this.email,\n            keyFile: this.keyFile,\n            key: this.key,\n            keyId: this.keyId,\n            scopes,\n            subject: this.subject,\n            additionalClaims: this.additionalClaims,\n        });\n    }\n    /**\n     * Obtains the metadata to be sent with the request.\n     *\n     * @param url the URI being authorized.\n     */\n    async getRequestMetadataAsync(url) {\n        if (!this.apiKey && !this.hasScopes() && url) {\n            if (this.additionalClaims &&\n                this.additionalClaims.target_audience) {\n                const { tokens } = await this.refreshToken();\n                return {\n                    headers: this.addSharedMetadataHeaders({\n                        Authorization: `Bearer ${tokens.id_token}`,\n                    }),\n                };\n            }\n            else {\n                // no scopes have been set, but a uri has been provided. Use JWTAccess\n                // credentials.\n                if (!this.access) {\n                    this.access = new jwtaccess_1.JWTAccess(this.email, this.key, this.keyId);\n                }\n                const headers = await this.access.getRequestHeaders(url, this.additionalClaims);\n                return { headers: this.addSharedMetadataHeaders(headers) };\n            }\n        }\n        else {\n            return super.getRequestMetadataAsync(url);\n        }\n    }\n    /**\n     * Fetches an ID token.\n     * @param targetAudience the audience for the fetched ID token.\n     */\n    async fetchIdToken(targetAudience) {\n        // Create a new gToken for fetching an ID token\n        const gtoken = new gtoken_1.GoogleToken({\n            iss: this.email,\n            sub: this.subject,\n            scope: this.scopes,\n            keyFile: this.keyFile,\n            key: this.key,\n            additionalClaims: { target_audience: targetAudience },\n        });\n        await gtoken.getToken({\n            forceRefresh: true,\n        });\n        if (!gtoken.idToken) {\n            throw new Error('Unknown error: Failed to fetch ID token');\n        }\n        return gtoken.idToken;\n    }\n    /**\n     * Determine if there are currently scopes available.\n     */\n    hasScopes() {\n        if (!this.scopes) {\n            return false;\n        }\n        // For arrays, check the array length.\n        if (this.scopes instanceof Array) {\n            return this.scopes.length > 0;\n        }\n        // For others, convert to a string and check the length.\n        return String(this.scopes).length > 0;\n    }\n    authorize(callback) {\n        if (callback) {\n            this.authorizeAsync().then(r => callback(null, r), callback);\n        }\n        else {\n            return this.authorizeAsync();\n        }\n    }\n    async authorizeAsync() {\n        const result = await this.refreshToken();\n        if (!result) {\n            throw new Error('No result returned');\n        }\n        this.credentials = result.tokens;\n        this.credentials.refresh_token = 'jwt-placeholder';\n        this.key = this.gtoken.key;\n        this.email = this.gtoken.iss;\n        return result.tokens;\n    }\n    /**\n     * Refreshes the access token.\n     * @param refreshToken ignored\n     * @private\n     */\n    async refreshTokenNoCache(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refreshToken) {\n        const gtoken = this.createGToken();\n        const token = await gtoken.getToken({\n            forceRefresh: this.isTokenExpiring(),\n        });\n        const tokens = {\n            access_token: token.access_token,\n            token_type: 'Bearer',\n            expiry_date: gtoken.expiresAt,\n            id_token: gtoken.idToken,\n        };\n        this.emit('tokens', tokens);\n        return { res: null, tokens };\n    }\n    /**\n     * Create a gToken if it doesn't already exist.\n     */\n    createGToken() {\n        if (!this.gtoken) {\n            this.gtoken = new gtoken_1.GoogleToken({\n                iss: this.email,\n                sub: this.subject,\n                scope: this.scopes,\n                keyFile: this.keyFile,\n                key: this.key,\n                additionalClaims: this.additionalClaims,\n            });\n        }\n        return this.gtoken;\n    }\n    /**\n     * Create a JWT credentials instance using the given input options.\n     * @param json The input object.\n     */\n    fromJSON(json) {\n        if (!json) {\n            throw new Error('Must pass in a JSON object containing the service account auth settings.');\n        }\n        if (!json.client_email) {\n            throw new Error('The incoming JSON object does not contain a client_email field');\n        }\n        if (!json.private_key) {\n            throw new Error('The incoming JSON object does not contain a private_key field');\n        }\n        // Extract the relevant information from the json key file.\n        this.email = json.client_email;\n        this.key = json.private_key;\n        this.keyId = json.private_key_id;\n        this.projectId = json.project_id;\n        this.quotaProjectId = json.quota_project_id;\n    }\n    fromStream(inputStream, callback) {\n        if (callback) {\n            this.fromStreamAsync(inputStream).then(() => callback(), callback);\n        }\n        else {\n            return this.fromStreamAsync(inputStream);\n        }\n    }\n    fromStreamAsync(inputStream) {\n        return new Promise((resolve, reject) => {\n            if (!inputStream) {\n                throw new Error('Must pass in a stream containing the service account auth settings.');\n            }\n            let s = '';\n            inputStream\n                .setEncoding('utf8')\n                .on('error', reject)\n                .on('data', chunk => (s += chunk))\n                .on('end', () => {\n                try {\n                    const data = JSON.parse(s);\n                    this.fromJSON(data);\n                    resolve();\n                }\n                catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n    /**\n     * Creates a JWT credentials instance using an API Key for authentication.\n     * @param apiKey The API Key in string form.\n     */\n    fromAPIKey(apiKey) {\n        if (typeof apiKey !== 'string') {\n            throw new Error('Must provide an API Key string.');\n        }\n        this.apiKey = apiKey;\n    }\n    /**\n     * Using the key or keyFile on the JWT client, obtain an object that contains\n     * the key and the client email.\n     */\n    async getCredentials() {\n        if (this.key) {\n            return { private_key: this.key, client_email: this.email };\n        }\n        else if (this.keyFile) {\n            const gtoken = this.createGToken();\n            const creds = await gtoken.getCredentials(this.keyFile);\n            return { private_key: creds.privateKey, client_email: creds.clientEmail };\n        }\n        throw new Error('A key or a keyFile must be provided to getCredentials.');\n    }\n}\nexports.JWT = JWT;\n//# sourceMappingURL=jwtclient.js.map"]},"metadata":{},"sourceType":"script"}