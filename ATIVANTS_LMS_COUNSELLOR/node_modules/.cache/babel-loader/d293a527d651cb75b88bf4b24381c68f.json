{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = ClockWrapper;\n\nvar _core = require(\"@emotion/core\");\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _configContext = _interopRequireDefault(require(\"../hooks/config-context\"));\n\nvar _Clock = _interopRequireDefault(require(\"./Clock\"));\n\nvar _Meridiems = _interopRequireDefault(require(\"./Meridiems\"));\n\nvar _clockWrapper = _interopRequireDefault(require(\"./styles/clock-wrapper\"));\n\nvar _clockEvents = _interopRequireDefault(require(\"../hooks/clock-events\"));\n\nvar _constants = require(\"../helpers/constants\");\n\nvar _utils = require(\"../helpers/utils\");\n\nvar _stateContext = _interopRequireDefault(require(\"../hooks/state-context\"));\n\nfunction ClockWrapper() {\n  var config = (0, _configContext.default)(); // clock events\n\n  var clock = (0, _react.useRef)(null);\n\n  var _useClockEvents = (0, _clockEvents.default)(clock, calculateTimeValue),\n      bind = _useClockEvents.bind;\n\n  var _useTimekeeperState = (0, _stateContext.default)(),\n      mode = _useTimekeeperState.mode,\n      updateTime = _useTimekeeperState.updateTime,\n      setMode = _useTimekeeperState.setMode,\n      getComposedTime = _useTimekeeperState.getComposedTime;\n  /*\r\n  \tLOGIC AROUND COARSE\r\n  \t- on drag, if count < 2, do not force coarse\r\n  \t- on mouseup, if count < 2 do not force coarse\r\n  \t- handlepoint\r\n  \t\t- if `wasTapped` OR `forceCoarse` config, then coarse it\r\n  \t- coarse is just rounding number to an increment before setting unit\r\n  \t\tLOGIC AROUND CAN CHANGE UNIT\r\n  \t- on drag, CAN NOT change unit\r\n  \t- on mouseup, can change unit\r\n  \t- AFTER time has been set, then determine if need to change unit\r\n  \t\t- based on this and user input\r\n  */\n\n  /*\r\n  \tconverts angle into time, also factors in any rounding to the closest increment\r\n  */\n\n\n  function calculateTimeValue(angle, _ref) {\n    var _ref$canAutoChangeUni = _ref.canAutoChangeUnit,\n        canAutoChangeUnit = _ref$canAutoChangeUni === void 0 ? false : _ref$canAutoChangeUni,\n        _ref$wasTapped = _ref.wasTapped,\n        wasTapped = _ref$wasTapped === void 0 ? false : _ref$wasTapped,\n        _ref$isInnerClick = _ref.isInnerClick,\n        isInnerClick = _ref$isInnerClick === void 0 ? false : _ref$isInnerClick;\n    // total number of allowable increments, 12/24 for hours, 60 for min\n    var totalIncrements = _constants.CLOCK_VALUES[mode].increments; // minimum increment used for rounding\n\n    var minIncrement = 1; // coarse minutes\n\n    if ((0, _utils.isMinuteMode)(mode) && (wasTapped || config.forceCoarseMinutes)) {\n      minIncrement = config.coarseMinutes;\n    }\n\n    var val = angle / 360 * totalIncrements;\n    var selected = Math.round(val / minIncrement) * minIncrement;\n\n    if (mode === _constants.MODE.HOURS_24 && config.hour24Mode) {\n      // fixes 12pm and midnight, both angle -> selected return 0\n      // for midnight need a final selected of 0, and for noon need 12\n      if (!isInnerClick && selected !== 0) {\n        selected += 12;\n      } else if (isInnerClick && selected === 0) {\n        selected += 12;\n      }\n    } // update time officially on timekeeper\n\n\n    updateTime(selected); // handle any unit autochanges on done click\n\n    if (canAutoChangeUnit) {\n      if (config.switchToMinuteOnHourSelect && (0, _utils.isHourMode)(mode)) {\n        setMode(_constants.MODE.MINUTES);\n      } else if (config.closeOnMinuteSelect && (0, _utils.isMinuteMode)(mode)) {\n        config.onDoneClick && config.onDoneClick(getComposedTime());\n      }\n    }\n  }\n\n  return (0, _core.jsx)(\"div\", (0, _extends2.default)({}, bind, {\n    className: \"react-timekeeper__clock-wrapper\",\n    css: _clockWrapper.default\n  }), (0, _core.jsx)(_Clock.default, {\n    clockEl: clock\n  }), !config.hour24Mode && (0, _core.jsx)(_Meridiems.default, null));\n}","map":{"version":3,"sources":["C:/Users/Activants46/Desktop/githubLMS/counsellorserver/ATIVANTS_LMS_COUNSELLOR/node_modules/react-timekeeper/lib/components/ClockWrapper.js"],"names":["_interopRequireWildcard","require","_interopRequireDefault","Object","defineProperty","exports","value","default","ClockWrapper","_core","_extends2","_react","_configContext","_Clock","_Meridiems","_clockWrapper","_clockEvents","_constants","_utils","_stateContext","config","clock","useRef","_useClockEvents","calculateTimeValue","bind","_useTimekeeperState","mode","updateTime","setMode","getComposedTime","angle","canAutoChangeUnit","wasTapped","isInnerClick","totalIncrements","CLOCK_VALUES","increments","minIncrement","isMinuteMode","forceCoarseMinutes","coarseMinutes","val","selected","Math","round","MODE","HOURS_24","hour24Mode","switchToMinuteOnHourSelect","isHourMode","MINUTES","closeOnMinuteSelect","onDoneClick","jsx","className","css","clockEl"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\r\n\r\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = ClockWrapper;\r\n\r\nvar _core = require(\"@emotion/core\");\r\n\r\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\r\n\r\nvar _react = _interopRequireWildcard(require(\"react\"));\r\n\r\nvar _configContext = _interopRequireDefault(require(\"../hooks/config-context\"));\r\n\r\nvar _Clock = _interopRequireDefault(require(\"./Clock\"));\r\n\r\nvar _Meridiems = _interopRequireDefault(require(\"./Meridiems\"));\r\n\r\nvar _clockWrapper = _interopRequireDefault(require(\"./styles/clock-wrapper\"));\r\n\r\nvar _clockEvents = _interopRequireDefault(require(\"../hooks/clock-events\"));\r\n\r\nvar _constants = require(\"../helpers/constants\");\r\n\r\nvar _utils = require(\"../helpers/utils\");\r\n\r\nvar _stateContext = _interopRequireDefault(require(\"../hooks/state-context\"));\r\n\r\nfunction ClockWrapper() {\r\n  const config = (0, _configContext.default)(); // clock events\r\n\r\n  const clock = (0, _react.useRef)(null);\r\n\r\n  const _useClockEvents = (0, _clockEvents.default)(clock, calculateTimeValue),\r\n        bind = _useClockEvents.bind;\r\n\r\n  const _useTimekeeperState = (0, _stateContext.default)(),\r\n        mode = _useTimekeeperState.mode,\r\n        updateTime = _useTimekeeperState.updateTime,\r\n        setMode = _useTimekeeperState.setMode,\r\n        getComposedTime = _useTimekeeperState.getComposedTime;\r\n  /*\r\n  \tLOGIC AROUND COARSE\r\n  \t- on drag, if count < 2, do not force coarse\r\n  \t- on mouseup, if count < 2 do not force coarse\r\n  \t- handlepoint\r\n  \t\t- if `wasTapped` OR `forceCoarse` config, then coarse it\r\n  \t- coarse is just rounding number to an increment before setting unit\r\n  \t\tLOGIC AROUND CAN CHANGE UNIT\r\n  \t- on drag, CAN NOT change unit\r\n  \t- on mouseup, can change unit\r\n  \t- AFTER time has been set, then determine if need to change unit\r\n  \t\t- based on this and user input\r\n  */\r\n\r\n  /*\r\n  \tconverts angle into time, also factors in any rounding to the closest increment\r\n  */\r\n\r\n\r\n  function calculateTimeValue(angle, {\r\n    canAutoChangeUnit = false,\r\n    wasTapped = false,\r\n    isInnerClick = false\r\n  }) {\r\n    // total number of allowable increments, 12/24 for hours, 60 for min\r\n    const totalIncrements = _constants.CLOCK_VALUES[mode].increments; // minimum increment used for rounding\r\n\r\n    let minIncrement = 1; // coarse minutes\r\n\r\n    if ((0, _utils.isMinuteMode)(mode) && (wasTapped || config.forceCoarseMinutes)) {\r\n      minIncrement = config.coarseMinutes;\r\n    }\r\n\r\n    const val = angle / 360 * totalIncrements;\r\n    let selected = Math.round(val / minIncrement) * minIncrement;\r\n\r\n    if (mode === _constants.MODE.HOURS_24 && config.hour24Mode) {\r\n      // fixes 12pm and midnight, both angle -> selected return 0\r\n      // for midnight need a final selected of 0, and for noon need 12\r\n      if (!isInnerClick && selected !== 0) {\r\n        selected += 12;\r\n      } else if (isInnerClick && selected === 0) {\r\n        selected += 12;\r\n      }\r\n    } // update time officially on timekeeper\r\n\r\n\r\n    updateTime(selected); // handle any unit autochanges on done click\r\n\r\n    if (canAutoChangeUnit) {\r\n      if (config.switchToMinuteOnHourSelect && (0, _utils.isHourMode)(mode)) {\r\n        setMode(_constants.MODE.MINUTES);\r\n      } else if (config.closeOnMinuteSelect && (0, _utils.isMinuteMode)(mode)) {\r\n        config.onDoneClick && config.onDoneClick(getComposedTime());\r\n      }\r\n    }\r\n  }\r\n\r\n  return (0, _core.jsx)(\"div\", (0, _extends2.default)({}, bind, {\r\n    className: \"react-timekeeper__clock-wrapper\",\r\n    css: _clockWrapper.default\r\n  }), (0, _core.jsx)(_Clock.default, {\r\n    clockEl: clock\r\n  }), !config.hour24Mode && (0, _core.jsx)(_Meridiems.default, null));\r\n}"]},"metadata":{},"sourceType":"script"}