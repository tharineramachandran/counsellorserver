{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseTime = parseTime;\nexports.parseMeridiem = parseMeridiem;\nexports.composeTime = composeTime;\nvar TIME_PARSE_MERIDIEM = new RegExp(/^(\\d{1,2}?):(\\d{2}?)\\s?(am|pm)$/i);\nvar TIME_PARSE_24 = new RegExp(/^(\\d{1,2}?):(\\d{2}?)$/);\nvar defaultTime = {\n  hour: 12,\n  minute: 30 // parse and normalize time to 24h\n\n};\n\nfunction parseTime(time) {\n  if (time == null) {\n    return defaultTime;\n  }\n\n  var hour = 0;\n  var minute = 0;\n  var meridiem = null; // parse basic numbers from string or object\n\n  if (typeof time === 'string') {\n    // if is string\n    var match = time.match(TIME_PARSE_MERIDIEM);\n\n    if (match) {\n      // 12 hr string\n      hour = parseInt(match[1], 10);\n      minute = parseInt(match[2], 10);\n      meridiem = match[3].toLowerCase();\n    } else {\n      // 24 hr string\n      match = time.match(TIME_PARSE_24);\n\n      if (!match) {\n        throw new Error('Could not parse time (string)');\n      }\n\n      hour = parseInt(match[1], 10);\n      minute = parseInt(match[2], 10);\n    }\n  } else if (typeof time === 'object') {\n    // if is object\n    if (!Number.isInteger(time.hour) || !Number.isInteger(time.minute)) {\n      throw new Error('Time and minute must both be valid integers');\n    }\n\n    hour = time.hour;\n    minute = time.minute;\n\n    if ('meridiem' in time) {\n      meridiem = time.meridiem.toLowerCase();\n    }\n  }\n\n  if (minute > 60) {\n    throw new Error('Minute out of range (> 60)');\n  } // normalize hours\n\n\n  if (meridiem != null) {\n    if (hour > 12) {\n      throw new Error('Hour out of range (> 12)');\n    } // handling the 12 hr conversion\n\n\n    if (meridiem === 'pm' && hour !== 12) {\n      hour += 12;\n    } else if (meridiem === 'am' && hour === 12) {\n      hour = 0;\n    }\n  } else {\n    // handling the 24 hour conversion\n    if (hour > 24) {\n      throw new Error('Hour out of range (> 24)');\n    }\n\n    if (hour === 24) {\n      hour = 0;\n    }\n  }\n\n  return {\n    hour: hour,\n    minute: minute\n  };\n}\n\nfunction parseMeridiem(time) {\n  var parsed = parseTime(time); // assumes time is 0 -> 23, where 0 is midnight\n\n  return parsed.hour >= 12 ? 'pm' : 'am';\n} // formats time output to poss to parent\n\n\nfunction composeTime(hour, minute) {\n  var paddedMinute = ('0' + minute).slice(-2);\n  var hour24 = hour === 24 ? 0 : hour;\n  var meridiem = hour >= 12 ? 'pm' : 'am';\n  var hour12 = hour;\n\n  if (hour > 12) {\n    hour12 = hour - 12;\n  } else if (hour === 0) {\n    hour12 = hour = 12;\n  }\n\n  return {\n    formatted24: \"\".concat(hour24, \":\").concat(paddedMinute),\n    formatted12: \"\".concat(hour12, \":\").concat(paddedMinute, \" \").concat(meridiem),\n    formattedSimple: \"\".concat(hour12, \":\").concat(paddedMinute),\n    hour: hour24,\n    hour12: hour12,\n    minute: minute,\n    meridiem: meridiem\n  };\n}","map":{"version":3,"sources":["C:/Users/Activants46/Desktop/githubLMS/counsellorserver/ATIVANTS_LMS_COUNSELLOR/node_modules/react-timekeeper/lib/helpers/time.js"],"names":["Object","defineProperty","exports","value","parseTime","parseMeridiem","composeTime","TIME_PARSE_MERIDIEM","RegExp","TIME_PARSE_24","defaultTime","hour","minute","time","meridiem","match","parseInt","toLowerCase","Error","Number","isInteger","parsed","paddedMinute","slice","hour24","hour12","formatted24","concat","formatted12","formattedSimple"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.parseTime = parseTime;\r\nexports.parseMeridiem = parseMeridiem;\r\nexports.composeTime = composeTime;\r\nconst TIME_PARSE_MERIDIEM = new RegExp(/^(\\d{1,2}?):(\\d{2}?)\\s?(am|pm)$/i);\r\nconst TIME_PARSE_24 = new RegExp(/^(\\d{1,2}?):(\\d{2}?)$/);\r\nconst defaultTime = {\r\n  hour: 12,\r\n  minute: 30 // parse and normalize time to 24h\r\n\r\n};\r\n\r\nfunction parseTime(time) {\r\n  if (time == null) {\r\n    return defaultTime;\r\n  }\r\n\r\n  let hour = 0;\r\n  let minute = 0;\r\n  let meridiem = null; // parse basic numbers from string or object\r\n\r\n  if (typeof time === 'string') {\r\n    // if is string\r\n    let match = time.match(TIME_PARSE_MERIDIEM);\r\n\r\n    if (match) {\r\n      // 12 hr string\r\n      hour = parseInt(match[1], 10);\r\n      minute = parseInt(match[2], 10);\r\n      meridiem = match[3].toLowerCase();\r\n    } else {\r\n      // 24 hr string\r\n      match = time.match(TIME_PARSE_24);\r\n\r\n      if (!match) {\r\n        throw new Error('Could not parse time (string)');\r\n      }\r\n\r\n      hour = parseInt(match[1], 10);\r\n      minute = parseInt(match[2], 10);\r\n    }\r\n  } else if (typeof time === 'object') {\r\n    // if is object\r\n    if (!Number.isInteger(time.hour) || !Number.isInteger(time.minute)) {\r\n      throw new Error('Time and minute must both be valid integers');\r\n    }\r\n\r\n    hour = time.hour;\r\n    minute = time.minute;\r\n\r\n    if ('meridiem' in time) {\r\n      meridiem = time.meridiem.toLowerCase();\r\n    }\r\n  }\r\n\r\n  if (minute > 60) {\r\n    throw new Error('Minute out of range (> 60)');\r\n  } // normalize hours\r\n\r\n\r\n  if (meridiem != null) {\r\n    if (hour > 12) {\r\n      throw new Error('Hour out of range (> 12)');\r\n    } // handling the 12 hr conversion\r\n\r\n\r\n    if (meridiem === 'pm' && hour !== 12) {\r\n      hour += 12;\r\n    } else if (meridiem === 'am' && hour === 12) {\r\n      hour = 0;\r\n    }\r\n  } else {\r\n    // handling the 24 hour conversion\r\n    if (hour > 24) {\r\n      throw new Error('Hour out of range (> 24)');\r\n    }\r\n\r\n    if (hour === 24) {\r\n      hour = 0;\r\n    }\r\n  }\r\n\r\n  return {\r\n    hour,\r\n    minute\r\n  };\r\n}\r\n\r\nfunction parseMeridiem(time) {\r\n  const parsed = parseTime(time); // assumes time is 0 -> 23, where 0 is midnight\r\n\r\n  return parsed.hour >= 12 ? 'pm' : 'am';\r\n} // formats time output to poss to parent\r\n\r\n\r\nfunction composeTime(hour, minute) {\r\n  const paddedMinute = ('0' + minute).slice(-2);\r\n  const hour24 = hour === 24 ? 0 : hour;\r\n  const meridiem = hour >= 12 ? 'pm' : 'am';\r\n  let hour12 = hour;\r\n\r\n  if (hour > 12) {\r\n    hour12 = hour - 12;\r\n  } else if (hour === 0) {\r\n    hour12 = hour = 12;\r\n  }\r\n\r\n  return {\r\n    formatted24: \"\".concat(hour24, \":\").concat(paddedMinute),\r\n    formatted12: \"\".concat(hour12, \":\").concat(paddedMinute, \" \").concat(meridiem),\r\n    formattedSimple: \"\".concat(hour12, \":\").concat(paddedMinute),\r\n    hour: hour24,\r\n    hour12: hour12,\r\n    minute: minute,\r\n    meridiem: meridiem\r\n  };\r\n}"]},"metadata":{},"sourceType":"script"}